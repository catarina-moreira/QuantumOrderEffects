(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    372308,       9982]
NotebookOptionsPosition[    368019,       9851]
NotebookOutlinePosition[    369637,       9901]
CellTagsIndexPosition[    369301,       9889]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Total Probability and Bayes's Theorem", "DemoTitle",
 CellChangeTimes->{
  3.35696210375764*^9, {3.45941984075*^9, 3.459419872078125*^9}, {
   3.4604100376524925`*^9, 3.460410040949283*^9}, 3.461608180602152*^9, 
   3.461670651274234*^9}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"shape", "=", 
   RowBox[{"{", 
    RowBox[{"triangle", ",", "square", ",", "pentagon"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"colour", "=", 
   RowBox[{"{", 
    RowBox[{"white", ",", "gray"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"largement", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"individualconstants", "=", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<A\>\"", ",", "\"\<L\>\""}], "]"}]}], ";"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"individualne", " ", "konstante", " ", "bodo", " ", "a"}], ",", 
    "b", ",", 
    RowBox[{"c", " ", "in", " ", "ne", " ", "znaki"}]}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"dvomestneIzjavne", "=", 
   RowBox[{"{", 
    RowBox[{"And", ",", "Or"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"individualconstants", "=", 
   RowBox[{"CharacterRange", "[", 
    RowBox[{"\"\<A\>\"", ",", "\"\<L\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"variables", "=", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z", ",", "u", ",", "v", ",", "w"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"variablesS", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\"", ",", "\"\<u\>\"", ",", 
     "\"\<v\>\"", ",", "\"\<w\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestni", "=", 
   RowBox[{"{", 
    RowBox[{
    "triangle", ",", "square", ",", "pentagon", ",", "white", ",", "gray"}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznS", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<trikotnik\>\"", ",", "\"\<kvadrat\>\"", ",", "\"\<petkotnik\>\"", 
     ",", "\"\<bel\>\"", ",", "\"\<siv\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznA", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<triangle\>\"", ",", "\"\<square\>\"", ",", "\"\<pentagon\>\"", ",", 
     "\"\<white\>\"", ",", "\"\<gray\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznArS", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<trikotnik\>\"", ",", "\"\<kvadrat\>\"", ",", "\"\<petkotnik\>\"", 
     ",", "\"\<bel lik\>\"", ",", "\"\<siv lik\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"enomestnioznArA", "=", 
    RowBox[{"{", 
     RowBox[{
     "\"\<triangle\>\"", ",", "\"\<square\>\"", ",", "\"\<pentagon\>\"", ",", 
      "\"\<white figure\>\"", ",", "\"\<gray figure\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"enomestniOblika", "=", 
   RowBox[{"{", 
    RowBox[{"triangle", ",", " ", "square", ",", "pentagon"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestniBarva", "=", 
   RowBox[{"{", 
    RowBox[{"white", ",", "gray"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznSOblika", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<trikotnik\>\"", ",", "\"\<kvadrat\>\"", ",", "\"\<petkotnik\>\""}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznAOblika", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<triangle\>\"", ",", "\"\<square\>\"", ",", "\"\<pentagon\>\""}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznArSOblika", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<trikotnik\>\"", ",", "\"\<kvadrat\>\"", ",", "\"\<petkotnik\>\""}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznArAOblika", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<triangle\>\"", ",", "\"\<square\>\"", ",", "\"\<pentagon\>\""}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznSBarva", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<bel\>\"", ",", "\"\<siv\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznABarva", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<white\>\"", ",", "\"\<gray\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestnioznArSBarva", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<bel lik\>\"", ",", "\"\<siv lik\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"enomestnioznArABarva", "=", 
    RowBox[{"{", 
     RowBox[{"\"\<white figure\>\"", ",", "\"\<gray figure\>\""}], "}"}]}], 
   ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"UppDot", "[", "string_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"prvi", "=", 
        RowBox[{"StringTake", "[", 
         RowBox[{"string", ",", "1"}], "]"}]}], ",", 
       RowBox[{"ostanek", "=", 
        RowBox[{"StringDrop", "[", 
         RowBox[{"string", ",", "1"}], "]"}]}], ",", "pom"}], "}"}], ",", 
     RowBox[{
      RowBox[{"prvi", "=", 
       RowBox[{"ToUpperCase", "[", "prvi", "]"}]}], ";", 
      RowBox[{"pom", "=", 
       RowBox[{"StringInsert", "[", 
        RowBox[{"ostanek", ",", "prvi", ",", "1"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"string", ",", 
           RowBox[{"-", "1"}]}], "]"}], "!=", "\"\<.\>\""}], ",", 
        RowBox[{"StringInsert", "[", 
         RowBox[{"pom", ",", "\"\<.\>\"", ",", 
          RowBox[{"-", "1"}]}], "]"}], ",", "pom"}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"chessboard", "=", 
    RowBox[{"Union", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "5"}], "}"}]}], "}"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "5"}], "}"}]}], "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "i"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", "i"}], "}"}]}], "}"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "5"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"GrayLevel", "[", "1", "]"}], ",", 
         RowBox[{"Line", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.5"}], ",", 
              RowBox[{"-", "0.5"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"5.5", ",", 
              RowBox[{"-", "0.5"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"5.5", ",", "5.5"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.5"}], ",", "5.5"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.5"}], ",", 
              RowBox[{"-", "0.5"}]}], "}"}]}], "}"}], "]"}]}], "}"}], "}"}]}],
      "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"chess", "[", 
    RowBox[{"m_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Line", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "0"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "m"}], "}"}]}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Line", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "i"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"n", ",", "i"}], "}"}]}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "m"}], "}"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"ToString", "[", "i", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"i", "+", 
            RowBox[{"1", "/", "2"}]}], ",", 
           RowBox[{"m", "-", 
            RowBox[{"1", "/", "2"}]}]}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"ToString", "[", "i", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "/", "2"}], ",", 
           RowBox[{"m", "-", 
            RowBox[{"1", "/", "2"}], "-", "i"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"m", "-", "1"}]}], "}"}]}], "]"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"lik", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tip_", ",", "vel_", ",", "r_", ",", "bar_"}], "}"}], ",", 
     RowBox[{"{", "i_", "}"}]}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"GrayLevel", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"bar", "\[Equal]", "0"}], ",", "0.8`", ",", "1"}], "]"}], 
        "]"}], ",", 
       RowBox[{"Polygon", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"r", "+", 
           RowBox[{"{", 
            RowBox[{
             FractionBox["1", "2"], ",", 
             FractionBox["1", "2"]}], "}"}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              FractionBox["1", "5"], "+", 
              FractionBox["vel", "4"]}], ")"}], " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", 
               FractionBox[
                RowBox[{"2", " ", "\[Pi]", " ", "n"}], 
                RowBox[{"tip", "+", "2"}]], "]"}], ",", 
              RowBox[{"Cos", "[", 
               FractionBox[
                RowBox[{"2", " ", "\[Pi]", " ", "n"}], 
                RowBox[{"tip", "+", "2"}]], "]"}]}], "}"}]}]}], ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", 
            RowBox[{"tip", "+", "2"}]}], "}"}]}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"bar", "\[Equal]", "2"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"GrayLevel", "[", "0.8`", "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"EvenQ", "[", "tip", "]"}], ",", 
           RowBox[{"Polygon", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"r", "+", 
               RowBox[{"{", 
                RowBox[{
                 FractionBox["1", "2"], ",", 
                 FractionBox["1", "2"]}], "}"}], "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  FractionBox["1", "5"], "+", 
                  FractionBox["vel", "4"]}], ")"}], " ", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Sin", "[", 
                   FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], 
                    RowBox[{"tip", "+", "2"}]], "]"}], ",", 
                  RowBox[{"Cos", "[", 
                   FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], 
                    RowBox[{"tip", "+", "2"}]], "]"}]}], "}"}]}]}], ",", 
              RowBox[{"{", 
               RowBox[{"n", ",", 
                RowBox[{
                 FractionBox["tip", "2"], "+", "2"}]}], "}"}]}], "]"}], "]"}],
            ",", 
           RowBox[{"Polygon", "[", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{
               FractionBox["1", "2"], " ", 
               RowBox[{"{", 
                RowBox[{"r", "+", 
                 RowBox[{"{", 
                  RowBox[{
                   FractionBox["1", "2"], ",", 
                   FractionBox["1", "2"]}], "}"}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    FractionBox["1", "5"], "+", 
                    FractionBox["vel", "4"]}], ")"}], " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Sin", "[", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]"}], 
                    RowBox[{"tip", "+", "2"}]], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]"}], 
                    RowBox[{"tip", "+", "2"}]], "]"}]}], "}"}]}], "+", "r", 
                 "+", 
                 RowBox[{"{", 
                  RowBox[{
                   FractionBox["1", "2"], ",", 
                   FractionBox["1", "2"]}], "}"}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    FractionBox["1", "5"], "+", 
                    FractionBox["vel", "4"]}], ")"}], " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Sin", "[", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "2"}], 
                    RowBox[{"tip", "+", "2"}]], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "2"}], 
                    RowBox[{"tip", "+", "2"}]], "]"}]}], "}"}]}]}], "}"}]}], 
              ",", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"r", "+", 
                 RowBox[{"{", 
                  RowBox[{
                   FractionBox["1", "2"], ",", 
                   FractionBox["1", "2"]}], "}"}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    FractionBox["1", "5"], "+", 
                    FractionBox["vel", "4"]}], ")"}], " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Sin", "[", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], 
                    RowBox[{"tip", "+", "2"}]], "]"}], ",", 
                    RowBox[{"Cos", "[", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], 
                    RowBox[{"tip", "+", "2"}]], "]"}]}], "}"}]}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"n", ",", "2", ",", 
                  RowBox[{
                   FractionBox[
                    RowBox[{"tip", "+", "1"}], "2"], "+", "2"}]}], "}"}]}], 
               "]"}]}], "]"}], "]"}]}], "]"}]}], "}"}], ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"GrayLevel", "[", "0", "]"}], ",", 
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{
         "individualconstants", "\[LeftDoubleBracket]", "i", 
          "\[RightDoubleBracket]"}], ",", 
         RowBox[{"r", "+", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "2"], ",", 
            FractionBox["1", "2"]}], "}"}], "-", 
          RowBox[{
           FractionBox["1", "3"], " ", "vel", " ", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}]}]}], "]"}], ",", 
       RowBox[{"BaseStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"FontSize", "\[Rule]", "20"}], "}"}]}]}], "}"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"lik2", "[", 
     RowBox[{"{", 
      RowBox[{"tip_", ",", "vel_", ",", "r_", ",", "bar_"}], "}"}], "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"GrayLevel", "[", "0.", "]"}], ",", 
       RowBox[{"ClosedLine", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"r", "+", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "/", "2"}], ",", 
             RowBox[{"1", "/", "2"}]}], "}"}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"1", "/", "5"}], "+", 
              RowBox[{"vel", "/", "4"}]}], ")"}], 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sin", "[", 
               RowBox[{"2", " ", "Pi", " ", 
                RowBox[{"n", "/", 
                 RowBox[{"(", 
                  RowBox[{"tip", "+", "2"}], ")"}]}]}], "]"}], ",", 
              RowBox[{"Cos", "[", 
               RowBox[{"2", " ", "Pi", " ", 
                RowBox[{"n", "/", 
                 RowBox[{"(", 
                  RowBox[{"tip", "+", "2"}], ")"}]}]}], "]"}]}], "}"}]}]}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", 
            RowBox[{"tip", "+", "2"}]}], "}"}]}], "]"}], "]"}]}], "}"}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generatTarski", "[", "i_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"free", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m", ",", "n"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"m", ",", "0", ",", "4"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"n", ",", "0", ",", "4"}], "}"}]}], "]"}], ",", "1"}], 
         "]"}]}], ",", 
       RowBox[{"structure", "=", 
        RowBox[{"{", "}"}]}], ",", "zaodst", ",", 
       RowBox[{"zasedeni", "=", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"nova", "=", 
          RowBox[{"free", "[", 
           RowBox[{"[", 
            RowBox[{"Random", "[", 
             RowBox[{"Integer", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", 
                RowBox[{"Length", "[", "free", "]"}]}], "}"}]}], "]"}], "]"}],
            "]"}]}], ";", 
         RowBox[{"sosede", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
              RowBox[{"nova", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "-", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"nova", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"nova", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "-", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", 
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", 
              RowBox[{"nova", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", 
              RowBox[{
               RowBox[{"nova", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "-", "1"}]}], "}"}]}], 
           "}"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"nov", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "1", ",", "2", ",", "3", ",", "20", ",", "20", ",", "20"}], 
              "}"}], "[", 
             RowBox[{"[", 
              RowBox[{"Random", "[", 
               RowBox[{"Integer", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "6"}], "}"}]}], "]"}], "]"}], "]"}], ",", 
            RowBox[{"Random", "[", 
             RowBox[{"Integer", ",", 
              RowBox[{"{", 
               RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "nova", ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "1", ",", "2", ",", "2"}], "}"}], "[", 
             RowBox[{"[", 
              RowBox[{"Random", "[", 
               RowBox[{"Integer", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}]}], 
           "}"}]}], ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"nov", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "3"}], ")"}], "&&", 
            RowBox[{
             RowBox[{"Intersection", "[", 
              RowBox[{"zasedeni", ",", "sosede"}], "]"}], "!=", 
             RowBox[{"{", "}"}]}]}], ",", 
           RowBox[{"nov", "=", 
            RowBox[{"ReplacePart", "[", 
             RowBox[{"nov", ",", 
              RowBox[{"Random", "[", 
               RowBox[{"Integer", ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", "2"}], 
             "]"}]}]}], "]"}], ";", 
         RowBox[{"structure", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"structure", ",", "nov"}], "]"}]}], ";", 
         RowBox[{"zaodst", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"nov", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "3"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"nov", "[", 
               RowBox[{"[", "3", "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
                RowBox[{
                 RowBox[{"nov", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "+", "1"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "-", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"nov", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"nov", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "-", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", 
                RowBox[{
                 RowBox[{"nov", "[", 
                  RowBox[{"[", "3", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"nov", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "-", "1"}]}], "}"}]}], 
             "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"nov", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "}"}]}], "]"}]}], ";", 
         RowBox[{"free", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"free", ",", "zaodst"}], "]"}]}], ";", 
         RowBox[{"zasedeni", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"zasedeni", ",", 
            RowBox[{"{", "nova", "}"}]}], "]"}]}]}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", "i"}], "}"}]}], "]"}], ";", 
      "structure"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ClosedLine", "[", "a_", "]"}], ":=", 
   RowBox[{"Line", "[", 
    RowBox[{"Append", "[", 
     RowBox[{"a", ",", 
      RowBox[{"First", "[", "a", "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"prikazsveta", "[", "svet_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sv1", ",", "sv2"}], "}"}], ",", 
     RowBox[{
      RowBox[{"sv1", "=", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{"lik", ",", "svet"}], "]"}]}], ";", 
      RowBox[{"sv2", "=", 
       RowBox[{"lik2", "/@", "svet"}]}], ";", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{"chessboard", ",", "sv1", ",", "sv2"}], "}"}], "]"}], ",", 
        RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", 
        RowBox[{"BaseStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"FontSize", "\[Rule]", "12"}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "250"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"enomestni", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"shape", ",", "colour", ",", "largement"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Id", "[", "x_", "]"}], ":=", "x"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"pravila", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"!", 
       RowBox[{"gray", "[", "x_", "]"}]}], "\[Rule]", 
      RowBox[{"white", "[", "x", "]"}]}], ",", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"white", "[", "x_", "]"}]}], "\[Rule]", 
      RowBox[{"gray", "[", "x", "]"}]}], ",", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"triangle", "[", "x_", "]"}]}], "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"square", "[", "x", "]"}], "||", 
        RowBox[{"pentagon", "[", "x", "]"}]}], ")"}]}], ",", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"square", "[", "x_", "]"}]}], "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"triangle", "[", "x", "]"}], "||", 
        RowBox[{"pentagon", "[", "x", "]"}]}], ")"}]}], ",", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"pentagon", "[", "x_", "]"}]}], "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"triangle", "[", "x", "]"}], "||", 
        RowBox[{"square", "[", "x", "]"}]}], ")"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"small", "[", "x_", "]"}]}], "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"medium", "[", "x", "]"}], "||", 
        RowBox[{"large", "[", "x", "]"}]}], ")"}]}], ",", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"medium", "[", "x_", "]"}]}], "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"small", "[", "x", "]"}], "||", 
        RowBox[{"large", "[", "x", "]"}]}], ")"}]}], ",", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"large", "[", "x_", "]"}]}], "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"small", "[", "x", "]"}], "||", 
        RowBox[{"medium", "[", "x", "]"}]}], ")"}]}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Prob", "[", 
     RowBox[{
      RowBox[{"large", "[", "x_", "]"}], ",", "structure_"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"structure", "[", 
         RowBox[{"[", 
          RowBox[{"First", "[", 
           RowBox[{"First", "[", 
            RowBox[{"Position", "[", 
             RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
          "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "3"}], ",", "1", ",", 
      "0"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Prob", "[", 
     RowBox[{
      RowBox[{"medium", "[", "x_", "]"}], ",", "structure_"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"structure", "[", 
         RowBox[{"[", 
          RowBox[{"First", "[", 
           RowBox[{"First", "[", 
            RowBox[{"Position", "[", 
             RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
          "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "2"}], ",", "1", ",", 
      "0"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Prob", "[", 
     RowBox[{
      RowBox[{"small", "[", "x_", "]"}], ",", "structure_"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"structure", "[", 
         RowBox[{"[", 
          RowBox[{"First", "[", 
           RowBox[{"First", "[", 
            RowBox[{"Position", "[", 
             RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
          "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "1"}], ",", "1", ",", 
      "0"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Prob", "[", 
    RowBox[{
     RowBox[{"triangle", "[", "x_", "]"}], ",", "structure_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"structure", "[", 
        RowBox[{"[", 
         RowBox[{"First", "[", 
          RowBox[{"First", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
         "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "1"}], ",", "1", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"structure", "[", 
          RowBox[{"[", 
           RowBox[{"First", "[", 
            RowBox[{"First", "[", 
             RowBox[{"Position", "[", 
              RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
           "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "20"}], ",", 
       RowBox[{"1", "/", "3"}], ",", "0"}], "]"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Prob", "[", 
    RowBox[{
     RowBox[{"square", "[", "x_", "]"}], ",", "structure_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"structure", "[", 
        RowBox[{"[", 
         RowBox[{"First", "[", 
          RowBox[{"First", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
         "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "2"}], ",", "1", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"structure", "[", 
          RowBox[{"[", 
           RowBox[{"First", "[", 
            RowBox[{"First", "[", 
             RowBox[{"Position", "[", 
              RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
           "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "20"}], ",", 
       RowBox[{"1", "/", "3"}], ",", "0"}], "]"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Prob", "[", 
    RowBox[{
     RowBox[{"pentagon", "[", "x_", "]"}], ",", "structure_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"structure", "[", 
        RowBox[{"[", 
         RowBox[{"First", "[", 
          RowBox[{"First", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
         "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "3"}], ",", "1", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"structure", "[", 
          RowBox[{"[", 
           RowBox[{"First", "[", 
            RowBox[{"First", "[", 
             RowBox[{"Position", "[", 
              RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
           "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "20"}], ",", 
       RowBox[{"1", "/", "3"}], ",", "0"}], "]"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Prob", "[", 
     RowBox[{
      RowBox[{"white", "[", "x_", "]"}], ",", "structure_"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"structure", "[", 
         RowBox[{"[", 
          RowBox[{"First", "[", 
           RowBox[{"First", "[", 
            RowBox[{"Position", "[", 
             RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
          "]"}], "]"}], "[", 
        RowBox[{"[", "4", "]"}], "]"}], "\[Equal]", "1"}], ",", "1", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"structure", "[", 
           RowBox[{"[", 
            RowBox[{"First", "[", 
             RowBox[{"First", "[", 
              RowBox[{"Position", "[", 
               RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}],
             "]"}], "]"}], "[", 
          RowBox[{"[", "4", "]"}], "]"}], "\[Equal]", "0"}], ",", "0", ",", 
        RowBox[{"1", "/", "2"}]}], "]"}]}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Prob", "[", 
     RowBox[{
      RowBox[{"gray", "[", "x_", "]"}], ",", "structure_"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"structure", "[", 
         RowBox[{"[", 
          RowBox[{"First", "[", 
           RowBox[{"First", "[", 
            RowBox[{"Position", "[", 
             RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}], 
          "]"}], "]"}], "[", 
        RowBox[{"[", "4", "]"}], "]"}], "\[Equal]", "0"}], ",", "1", ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"structure", "[", 
           RowBox[{"[", 
            RowBox[{"First", "[", 
             RowBox[{"First", "[", 
              RowBox[{"Position", "[", 
               RowBox[{"individualconstants", ",", "x"}], "]"}], "]"}], "]"}],
             "]"}], "]"}], "[", 
          RowBox[{"[", "4", "]"}], "]"}], "\[Equal]", "1"}], ",", "0", ",", 
        RowBox[{"1", "/", "2"}]}], "]"}]}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Valuation", "[", 
   RowBox[{
    RowBox[{"{", "form_", "}"}], ",", "structure_"}], "]"}], ":=", 
  RowBox[{"Prob", "[", 
   RowBox[{"form", ",", "structure"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"contraryQ", "[", 
     RowBox[{
      RowBox[{"pred1_", "[", "x_", "]"}], ",", 
      RowBox[{"pred2_", "[", "x_", "]"}]}], "]"}], ":=", 
    RowBox[{
     RowBox[{"pred1", "  ", "=!=", " ", "pred2"}], " ", "&&", 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"shape", ",", "pred1"}], "]"}], "&&", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"shape", ",", "pred2"}], "]"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"colour", ",", "pred1"}], "]"}], "&&", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"colour", ",", "pred2"}], "]"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"largement", ",", "pred1"}], "]"}], "&&", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"largement", ",", "pred2"}], "]"}]}], ")"}]}], ")"}]}]}], 
   ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Valuation", "[", 
    RowBox[{"list_", ",", "structure_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Rest", "[", "list", "]"}], ",", 
         RowBox[{
          RowBox[{"contraryQ", "[", 
           RowBox[{
            RowBox[{"First", "[", "list", "]"}], ",", "#"}], "]"}], "&"}]}], 
        "]"}], "]"}], ">", "0"}], ",", "0", ",", 
     RowBox[{
      RowBox[{"Prob", "[", 
       RowBox[{
        RowBox[{"First", "[", "list", "]"}], ",", "structure"}], "]"}], 
      RowBox[{"Valuation", "[", 
       RowBox[{
        RowBox[{"Rest", "[", "list", "]"}], ",", "structure"}], "]"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Val", "[", 
    RowBox[{"x_List", ",", "str_"}], "]"}], ":=", 
   RowBox[{"Valuation", "[", 
    RowBox[{"x", ",", "str"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Prob1", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_List", ",", "y_List"}], "}"}], ",", "str_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Val", "[", 
     RowBox[{"x", ",", "str"}], "]"}], "+", 
    RowBox[{"Val", "[", 
     RowBox[{"y", ",", "str"}], "]"}], "-", 
    RowBox[{"Val", "[", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{"x", ",", "y"}], "]"}], ",", "str"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Prob1", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x_List", ",", "y_List", ",", "z__List"}], "}"}], ",", 
      "str_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Val", "[", 
      RowBox[{"x", ",", "str"}], "]"}], "+", 
     RowBox[{"Prob1", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"y", ",", "z"}], "}"}], ",", "str"}], "]"}], "-", 
     RowBox[{"Prob1", "[", 
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{"Union", ",", 
         RowBox[{"Distribute", "[", 
          RowBox[{
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"{", "x", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", "z"}], "}"}]}], "]"}], ",", "List"}], "]"}], 
         ",", "1"}], "]"}], ",", "str"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Verjetnost", "[", 
     RowBox[{"formul1_", ",", "svet1_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "formul2", ",", "formul3", ",", "formul4", ",", "sez2", ",", "sez3"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"formul2", "=", 
        RowBox[{"LogicalExpand", "[", "formul1", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"formul3", "=", 
        RowBox[{"(", 
         RowBox[{"formul2", "/.", "pravila"}], ")"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"formul4", "=", 
        RowBox[{"LogicalExpand", "[", "formul3", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", "formul4", "]"}], "===", " ", "Or"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sez2", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", 
                 RowBox[{"formul4", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "]"}], ">", "1"}], ",", 
               RowBox[{"Apply", "[", 
                RowBox[{"List", ",", 
                 RowBox[{"formul4", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"formul4", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "formul4", "]"}]}], "}"}]}], "]"}]}], 
          ";", 
          RowBox[{"Prob1", "[", 
           RowBox[{"sez2", ",", "svet1"}], "]"}]}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "formul4", "]"}], "===", "And"}], ",", 
           RowBox[{
            RowBox[{"sez3", "=", 
             RowBox[{"Apply", "[", 
              RowBox[{"List", ",", "formul4"}], "]"}]}], ";", 
            RowBox[{"Valuation", "[", 
             RowBox[{"sez3", ",", "svet1"}], "]"}]}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{"enomestni", ",", 
               RowBox[{"Head", "[", "formul4", "]"}]}], "]"}], ",", 
             RowBox[{"Prob", "[", 
              RowBox[{"formul4", ",", "svet1"}], "]"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{"formul4", ",", "1", ",", "0"}], "]"}]}], "]"}]}], 
          "]"}]}], "]"}]}]}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ApVerjetnost", "[", "svet_", "]"}], "[", "stavek_", "]"}], ":=", 
    RowBox[{"Verjetnost", "[", 
     RowBox[{"stavek", ",", "svet"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"atomicPog", "[", "k_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"enomestni", "[", 
        RowBox[{"[", "ren", "]"}], "]"}], "[", "\"\<X\>\"", "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"enomestni", "[", 
            RowBox[{"[", "ren", "]"}], "]"}], "[", 
           RowBox[{"individualconstants", "[", 
            RowBox[{"[", "rin", "]"}], "]"}], "]"}], ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<lik \>\"", ",", 
            RowBox[{"individualconstants", "[", 
             RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< je \>\"", ",", 
            RowBox[{"enomestnioznS", "[", 
             RowBox[{"[", "ren", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<figure \>\"", ",", 
            RowBox[{"individualconstants", "[", 
             RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< is \>\"", ",", 
            RowBox[{"enomestnioznA", "[", 
             RowBox[{"[", "ren", "]"}], "]"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"rin", ",", "1", ",", "k"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"ren", ",", "1", ",", "5"}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"NatomicPog", "[", "k_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{
        RowBox[{"enomestni", "[", 
         RowBox[{"[", "ren", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{
            RowBox[{"enomestni", "[", 
             RowBox[{"[", "ren", "]"}], "]"}], "[", 
            RowBox[{"individualconstants", "[", 
             RowBox[{"[", "rin", "]"}], "]"}], "]"}], "]"}], ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<lik \>\"", ",", 
            RowBox[{"individualconstants", "[", 
             RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< je \>\"", ",", 
            RowBox[{"enomestnioznS", "[", 
             RowBox[{"[", "ren", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<figure \>\"", ",", 
            RowBox[{"individualconstants", "[", 
             RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< is \>\"", ",", 
            RowBox[{"enomestnioznA", "[", 
             RowBox[{"[", "ren", "]"}], "]"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"rin", ",", "1", ",", "k"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"ren", ",", "1", ",", "5"}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"Natomic", "[", "k_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Not", "[", 
       RowBox[{
        RowBox[{"enomestni", "[", 
         RowBox[{"[", "ren", "]"}], "]"}], "[", 
        RowBox[{"individualconstants", "[", 
         RowBox[{"[", "rin", "]"}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"\"\<lik \>\"", ",", 
        RowBox[{"individualconstants", "[", 
         RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni \>\"", ",", 
        RowBox[{"enomestnioznS", "[", 
         RowBox[{"[", "ren", "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"\"\<figure \>\"", ",", 
        RowBox[{"individualconstants", "[", 
         RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< is not (a) \>\"", ",", 
        RowBox[{"enomestnioznA", "[", 
         RowBox[{"[", "ren", "]"}], "]"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"ren", ",", "1", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"rin", ",", "1", ",", "k"}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"molsentPozitivEnaPog", "[", "k_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dvo", "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"enomestniBarva", "[", 
           RowBox[{"[", "bar", "]"}], "]"}], "[", "\"\<X\>\"", "]"}], "&&", 
         RowBox[{
          RowBox[{"enomestniOblika", "[", 
           RowBox[{"[", "obl", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"enomestniBarva", "[", 
           RowBox[{"[", "bar", "]"}], "]"}], "[", "\"\<X\>\"", "]"}], "||", 
         RowBox[{
          RowBox[{"enomestniOblika", "[", 
           RowBox[{"[", "obl", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}]}], 
       "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"dvomestneIzjavne", "[", 
            RowBox[{"[", "dvo", "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{
             RowBox[{"enomestniBarva", "[", 
              RowBox[{"[", "bar", "]"}], "]"}], "[", 
             RowBox[{"individualconstants", "[", 
              RowBox[{"[", "rin", "]"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"enomestniOblika", "[", 
              RowBox[{"[", "obl", "]"}], "]"}], "[", 
             RowBox[{"individualconstants", "[", 
              RowBox[{"[", "rin", "]"}], "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"dvo", "\[Equal]", "1"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<lik \>\"", ",", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< je \>\"", ",", 
              RowBox[{"enomestnioznSBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< \>\"", ",", 
              RowBox[{"enomestnioznSOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<lik \>\"", ",", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< je \>\"", ",", 
              RowBox[{"enomestnioznSBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< ali \>\"", ",", 
              RowBox[{"enomestnioznSOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}]}], "]"}]}], "]"}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"rin", ",", "1", ",", "k"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"obl", ",", "1", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"bar", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"dvo", ",", "1", ",", "2"}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"molsentPozitivEnaKoncna", "[", "k_", "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"molsentPozitivEna", "[", "k", "]"}], ",", "3"}], "]"}]}], "\n", 
  RowBox[{"(*", 
   RowBox[{"molsentPoNeEnaKoncna", "[", "3", "]"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"molsentPoNeEnaPog", "[", "k_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dvo", "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"enomestniBarva", "[", 
           RowBox[{"[", "bar", "]"}], "]"}], "[", "\"\<X\>\"", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}]}], 
        ",", 
        RowBox[{
         RowBox[{
          RowBox[{"enomestniBarva", "[", 
           RowBox[{"[", "bar", "]"}], "]"}], "[", "\"\<X\>\"", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}]}]}], 
       "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"dvomestneIzjavne", "[", 
            RowBox[{"[", "dvo", "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{
             RowBox[{"enomestniBarva", "[", 
              RowBox[{"[", "bar", "]"}], "]"}], "[", 
             RowBox[{"individualconstants", "[", 
              RowBox[{"[", "rin", "]"}], "]"}], "]"}], ",", 
            RowBox[{"!", 
             RowBox[{
              RowBox[{"enomestniOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}], "[", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"dvo", "\[Equal]", "1"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<lik \>\"", ",", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< je \>\"", ",", 
              RowBox[{"enomestnioznSBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< vendar ni \>\"", 
              ",", 
              RowBox[{"enomestnioznSOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<lik \>\"", ",", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< je \>\"", ",", 
              RowBox[{"enomestnioznSBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< ali pa ni \>\"", 
              ",", 
              RowBox[{"enomestnioznSOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}]}], "]"}]}], "]"}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"rin", ",", "1", ",", "k"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"obl", ",", "1", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"bar", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"dvo", ",", "1", ",", "2"}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"molsentNePoEnaPog", "[", "k_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dvo", "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}], "&&", 
         RowBox[{
          RowBox[{"enomestniOblika", "[", 
           RowBox[{"[", "obl", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}], ",", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}], "&&", 
         RowBox[{
          RowBox[{"enomestniOblika", "[", 
           RowBox[{"[", "obl", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}]}], 
       "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"dvomestneIzjavne", "[", 
            RowBox[{"[", "dvo", "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{
              RowBox[{"enomestniBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], "[", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"enomestniOblika", "[", 
              RowBox[{"[", "obl", "]"}], "]"}], "[", 
             RowBox[{"individualconstants", "[", 
              RowBox[{"[", "rin", "]"}], "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"dvo", "\[Equal]", "1"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<lik \>\"", ",", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni \>\"", ",", 
              RowBox[{"enomestnioznSBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< vendar je \>\"", 
              ",", 
              RowBox[{"enomestnioznSOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<lik \>\"", ",", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni \>\"", ",", 
              RowBox[{"enomestnioznSBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< ali pa je \>\"", 
              ",", 
              RowBox[{"enomestnioznSOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}]}], "]"}]}], "]"}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"rin", ",", "1", ",", "k"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"obl", ",", "1", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"bar", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"dvo", ",", "1", ",", "2"}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"molsentNeNeEnaPog", "[", "k_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dvo", "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}]}], 
        ",", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}], "[", "\"\<X\>\"", "]"}]}]}]}], 
       "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"dvomestneIzjavne", "[", 
            RowBox[{"[", "dvo", "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{"!", 
             RowBox[{
              RowBox[{"enomestniBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], "[", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], "]"}]}], ",", 
            RowBox[{"!", 
             RowBox[{
              RowBox[{"enomestniOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}], "[", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"dvo", "\[Equal]", "1"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<lik \>\"", ",", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni \>\"", ",", 
              RowBox[{"enomestnioznSBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< ne \>\"", ",", 
              RowBox[{"enomestnioznSOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"\"\<lik \>\"", ",", 
              RowBox[{"individualconstants", "[", 
               RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni \>\"", ",", 
              RowBox[{"enomestnioznSBarva", "[", 
               RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< ali pa ni \>\"", 
              ",", 
              RowBox[{"enomestnioznSOblika", "[", 
               RowBox[{"[", "obl", "]"}], "]"}]}], "]"}]}], "]"}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"rin", ",", "1", ",", "k"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"obl", ",", "1", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"bar", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"dvo", ",", "1", ",", "2"}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"molsentNeNeEna", "[", "k_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"dvomestneIzjavne", "[", 
         RowBox[{"[", "dvo", "]"}], "]"}], "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], "[", 
           RowBox[{"individualconstants", "[", 
            RowBox[{"[", "rin", "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}], "[", 
           RowBox[{"individualconstants", "[", 
            RowBox[{"[", "rin", "]"}], "]"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"dvo", "\[Equal]", "1"}], ",", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<lik \>\"", ",", 
           RowBox[{"individualconstants", "[", 
            RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni niti \>\"", ",", 
           RowBox[{"enomestnioznSBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< niti \>\"", ",", 
           RowBox[{"enomestnioznSOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<lik \>\"", ",", 
           RowBox[{"individualconstants", "[", 
            RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni \>\"", ",", 
           RowBox[{"enomestnioznSBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< ali pa ni \>\"", ",", 
           RowBox[{"enomestnioznSOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}]}], "]"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rin", ",", "1", ",", "k"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"obl", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"bar", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"dvo", ",", "1", ",", "2"}], "}"}]}], "]"}]}], "\n", 
  RowBox[{"(*", 
   RowBox[{"molsentNeNeEna", "[", "3", "]"}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"molsentNePoEna", "[", "k_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"dvomestneIzjavne", "[", 
         RowBox[{"[", "dvo", "]"}], "]"}], "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{
           RowBox[{"enomestniBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], "[", 
           RowBox[{"individualconstants", "[", 
            RowBox[{"[", "rin", "]"}], "]"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"enomestniOblika", "[", 
           RowBox[{"[", "obl", "]"}], "]"}], "[", 
          RowBox[{"individualconstants", "[", 
           RowBox[{"[", "rin", "]"}], "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"dvo", "\[Equal]", "1"}], ",", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<lik \>\"", ",", 
           RowBox[{"individualconstants", "[", 
            RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni \>\"", ",", 
           RowBox[{"enomestnioznSBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< vendar je \>\"", ",", 
           RowBox[{"enomestnioznSOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"\"\<lik \>\"", ",", 
           RowBox[{"individualconstants", "[", 
            RowBox[{"[", "rin", "]"}], "]"}], ",", "\"\< ni \>\"", ",", 
           RowBox[{"enomestnioznSBarva", "[", 
            RowBox[{"[", "bar", "]"}], "]"}], ",", "\"\< ali pa je \>\"", ",", 
           RowBox[{"enomestnioznSOblika", "[", 
            RowBox[{"[", "obl", "]"}], "]"}]}], "]"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rin", ",", "1", ",", "k"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"obl", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"bar", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"dvo", ",", "1", ",", "2"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"stpogojni", "[", 
     RowBox[{
     "k_", ",", "k1_", ",", "k2_", ",", "k3_", ",", "k4_", ",", "k5_", ",", 
      "k6_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sA", "=", 
        RowBox[{
         RowBox[{"atomicPog", "[", "k", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", "\n", 
       RowBox[{"sAS", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"atomicPog", "[", "k", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "sA", "]"}]}], "}"}]}], "]"}]}], ";", "\n", 
       RowBox[{"sN", "=", 
        RowBox[{
         RowBox[{"NatomicPog", "[", "k", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", "\n", 
       RowBox[{"sNS", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"NatomicPog", "[", "k", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "sN", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\n", 
       RowBox[{"stPP", "=", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"molsentPozitivEnaPog", "[", "k", "]"}], ",", "2"}], "]"}],
          "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", "\n", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"stPPV", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"molsentPozitivEnaPog", "[", "k", "]"}], ",", "2"}], 
              "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "stPP", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\n", 
       RowBox[{"stNP", "=", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"molsentNePoEnaPog", "[", "k", "]"}], ",", "2"}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", "\n", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"stNPV", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"molsentNePoEnaPog", "[", "k", "]"}], ",", "2"}], 
              "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "stNP", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"stPN", "=", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"molsentPoNeEnaPog", "[", "k", "]"}], ",", "2"}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\n", 
       RowBox[{"stPNV", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"molsentPoNeEnaPog", "[", "k", "]"}], ",", "2"}], 
              "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "stPN", "]"}]}], "}"}]}], "]"}]}], ";", 
       RowBox[{"stNN", "=", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"molsentNeNeEnaPog", "[", "k", "]"}], ",", "2"}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\n", "\[IndentingNewLine]", 
       RowBox[{"stNNV", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"molsentNeNeEnaPog", "[", "k", "]"}], ",", "2"}], 
              "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "stNN", "]"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"sA", "[", 
            RowBox[{"[", 
             RowBox[{"sk1", "=", 
              RowBox[{"RandomKSubsetH", "[", 
               RowBox[{
                RowBox[{"Length", "[", "sA", "]"}], ",", "k1"}], "]"}]}], 
             "]"}], "]"}], ",", 
           RowBox[{"sN", "[", 
            RowBox[{"[", 
             RowBox[{"sk2", "=", 
              RowBox[{"RandomKSubsetH", "[", 
               RowBox[{
                RowBox[{"Length", "[", "sN", "]"}], ",", "k2"}], "]"}]}], 
             "]"}], "]"}], ",", 
           RowBox[{"stPP", "[", 
            RowBox[{"[", 
             RowBox[{"sk3", "=", 
              RowBox[{"RandomKSubsetH", "[", 
               RowBox[{
                RowBox[{"Length", "[", "stPP", "]"}], ",", "k3"}], "]"}]}], 
             "]"}], "]"}], ",", 
           RowBox[{"stPN", "[", 
            RowBox[{"[", 
             RowBox[{"sk4", "=", 
              RowBox[{"RandomKSubsetH", "[", 
               RowBox[{
                RowBox[{"Length", "[", "stPN", "]"}], ",", "k4"}], "]"}]}], 
             "]"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"stNP", "[", 
            RowBox[{"[", 
             RowBox[{"sk5", "=", 
              RowBox[{"RandomKSubsetH", "[", 
               RowBox[{
                RowBox[{"Length", "[", "stNP", "]"}], ",", "k5"}], "]"}]}], 
             "]"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"stNN", "[", 
            RowBox[{"[", 
             RowBox[{"sk6", "=", 
              RowBox[{"RandomKSubsetH", "[", 
               RowBox[{
                RowBox[{"Length", "[", "stNN", "]"}], ",", "k6"}], "]"}]}], 
             "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"sAS", "[", 
            RowBox[{"[", "sk1", "]"}], "]"}], ",", 
           RowBox[{"sNS", "[", 
            RowBox[{"[", "sk2", "]"}], "]"}], ",", 
           RowBox[{"stPPV", "[", 
            RowBox[{"[", "sk3", "]"}], "]"}], ",", 
           RowBox[{"stPNV", "[", 
            RowBox[{"[", "sk4", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"stNPV", "[", 
            RowBox[{"[", "sk5", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"stNNV", "[", 
            RowBox[{"[", "sk6", "]"}], "]"}]}], "]"}]}], "}"}]}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RandomKsublist", "[", 
    RowBox[{"set_", ",", "k_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"sub", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"rest", "=", "set"}], ",", "new"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"new", "=", 
          RowBox[{"rest", "[", 
           RowBox[{"[", 
            RowBox[{"RandomInteger", "[", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"Length", "[", "rest", "]"}]}], "}"}], "]"}], "]"}], 
           "]"}]}], ";", 
         RowBox[{"sub", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"sub", ",", "new"}], "]"}]}], ";", 
         RowBox[{"rest", "=", 
          RowBox[{"Complement", "[", 
           RowBox[{"rest", ",", 
            RowBox[{"{", "new", "}"}]}], "]"}]}]}], ",", 
        RowBox[{"{", "k", "}"}]}], "]"}], ";", "sub"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RandomKSubsetH", "[", 
    RowBox[{"kk_", ",", "k_"}], "]"}], ":=", 
   RowBox[{"RandomKsublist", "[", 
    RowBox[{
     RowBox[{"Range", "[", "kk", "]"}], ",", "k"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.35696210375764*^9, 3.459528811357269*^9, {3.460290354775528*^9, 
   3.46029041840489*^9}, {3.4602904629413433`*^9, 3.460290489132962*^9}, 
   3.462069992953125*^9},
 CellID->697381182]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"k1", "=", "2"}], ",", 
       RowBox[{"k2", "=", "2"}], ",", 
       RowBox[{"k3", "=", "1"}], ",", 
       RowBox[{"k4", "=", "1"}], ",", 
       RowBox[{"k5", "=", "1"}], ",", 
       RowBox[{"k6", "=", "1"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ran", "=", 
          RowBox[{"SeedRandom", "[", "ranint", "]"}]}], ",", 
         RowBox[{"svet", "=", 
          RowBox[{"generatTarski", "[", "k", "]"}]}], ",", 
         RowBox[{"stavki", "=", 
          RowBox[{"stpogojni", "[", 
           RowBox[{
           "k", ",", "k1", ",", "k2", ",", "k3", ",", "k4", ",", "k5", ",", 
            "k6"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"seznam", "=", 
           RowBox[{"stavki", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"gr1", "=", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{"TraditionalForm", "[", 
                    RowBox[{
                    RowBox[{"stavki", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "12"}], "]"}],
                   "}"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "1", ",", 
                  RowBox[{"Length", "[", "seznam", "]"}]}], "}"}]}], "]"}]}], 
             ",", 
             RowBox[{"tv", "=", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{"ApVerjetnost", "[", "svet", "]"}], ",", "seznam", 
                ",", 
                RowBox[{"{", "2", "}"}]}], "]"}]}]}], "}"}], ",", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"rezult", "=", 
               RowBox[{
                RowBox[{"Apply", "[", 
                 RowBox[{"Plus", ",", "tv", ",", 
                  RowBox[{"{", "1", "}"}]}], "]"}], "/", "k"}]}], "}"}], ",", 
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"rez2", "=", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"rezult", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "0"}], ",", 
                    "\"\<U\>\"", ",", 
                    RowBox[{
                    RowBox[{"tv", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"k", " ", 
                    RowBox[{"rezult", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "seznam", "]"}]}], "}"}]}], 
                   "]"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{"rez3", "=", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"rezult", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "0"}], ",", 
                    "\"\<U\>\"", ",", 
                    RowBox[{
                    RowBox[{"tv", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"k", " ", 
                    RowBox[{"rezult", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "seznam", "]"}]}], "}"}]}], 
                   "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Pane", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Text", "@", 
                  RowBox[{"Labeled", "[", 
                   RowBox[{
                    RowBox[{"prikazsveta", "[", "svet", "]"}], ",", 
                    RowBox[{"Grid", "[", "\[IndentingNewLine]", 
                    RowBox[{"Join", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"showrezult", ",", "\"\<S\>\"", ",", "\"\<\>\""}],
                     "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "showrezult", ",", "\"\<P(S)\>\"", ",", "\"\<\>\""}], 
                    "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "showrezult", ",", "\"\<P(X = A | S)\>\"", ",", 
                    "\"\<\>\""}], "]"}], " ", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "showrezult", ",", "\"\<P(X = B | S)\>\"", ",", 
                    "\"\<\>\""}], "]"}]}], "}"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"gr1", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "12"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"showrezult", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"rezult", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "12"}], "]"}], ",", 
                    "\"\<\>\""}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"showrezult", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"rez2", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "12"}], "]"}], ",", 
                    "\"\<\>\""}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"showrezult", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"rez3", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "12"}], "]"}], ",", 
                    "\"\<\>\""}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "seznam", "]"}]}], "}"}]}], 
                    "]"}]}], "\[IndentingNewLine]", "]"}], 
                    "\[IndentingNewLine]", "]"}], ",", "Right"}], "]"}]}], 
                 ",", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"590", ",", "300"}], "}"}]}]}], "]"}]}], "]"}]}], 
            "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"showrezult", ",", "True", ",", "\"\<show results\>\""}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", "2", ",", "\"\<elements\>\""}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"2", ",", "5"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ranint", ",", "125"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<reset\>\"", ",", 
     RowBox[{"ranint", "=", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1000"}], "}"}], "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "140"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4594199541875*^9, 3.459419956578125*^9}, {
   3.459419992265625*^9, 3.4594200304375*^9}, {3.459420067203125*^9, 
   3.459420079234375*^9}, {3.459420372859375*^9, 3.45942040434375*^9}, {
   3.459421199328125*^9, 3.459421421921875*^9}, {3.459421778765625*^9, 
   3.459421779265625*^9}, {3.45942188840625*^9, 3.459421973375*^9}, {
   3.4595807609375*^9, 3.459580780109375*^9}, {3.459580811734375*^9, 
   3.4595808139375*^9}, {3.459580889578125*^9, 3.45958094978125*^9}, {
   3.4595810465*^9, 3.459581134015625*^9}, {3.459581196109375*^9, 
   3.45958130125*^9}, {3.459581333796875*^9, 3.45958134171875*^9}, 
   3.460290501060155*^9, {3.460292622514279*^9, 3.460292631416169*^9}, {
   3.460295957593754*^9, 3.460295969094904*^9}, {3.460296000350029*^9, 
   3.4602960313431273`*^9}, {3.460410057823851*^9, 3.460410058089469*^9}, {
   3.4604101349468765`*^9, 3.460410203695117*^9}, {3.460410283411826*^9, 
   3.4604103446915073`*^9}, {3.4604104413921566`*^9, 3.460410442110888*^9}, 
   3.4604106224187717`*^9, {3.460410754524765*^9, 3.4604107684619083`*^9}, {
   3.4604112347872825`*^9, 3.4604112354126143`*^9}, {3.4604112677110124`*^9, 
   3.460411340093191*^9}, {3.46041148751521*^9, 3.460411595451676*^9}, 
   3.460699429125*^9, {3.461085415014105*^9, 3.461085442227826*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 2, $CellContext`ranint$$ = 
    125, $CellContext`showrezult$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`showrezult$$], True, "show results"}, {
      False, True}}, {{
       Hold[$CellContext`k$$], 2, "elements"}, {2, 3, 4, 5}}, {{
       Hold[$CellContext`ranint$$], 125}}, {
      Hold[
       Button[
       "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
        140]], Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    590., {147.5, 152.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`showrezult$1988$$ = 
    False, $CellContext`k$1989$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 2, $CellContext`ranint$$ = 
        125, $CellContext`showrezult$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`showrezult$$, $CellContext`showrezult$1988$$, 
         False], 
        Hold[$CellContext`k$$, $CellContext`k$1989$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      With[{$CellContext`k1$ = 2, $CellContext`k2$ = 2, $CellContext`k3$ = 
         1, $CellContext`k4$ = 1, $CellContext`k5$ = 1, $CellContext`k6$ = 1}, 
        With[{$CellContext`ran$ = 
          SeedRandom[$CellContext`ranint$$], $CellContext`svet$ = \
$CellContext`generatTarski[$CellContext`k$$], $CellContext`stavki$ = \
$CellContext`stpogojni[$CellContext`k$$, $CellContext`k1$, $CellContext`k2$, \
$CellContext`k3$, $CellContext`k4$, $CellContext`k5$, $CellContext`k6$]}, 
         With[{$CellContext`seznam$ = Part[$CellContext`stavki$, 2]}, 
          With[{$CellContext`gr1$ = Table[
              Row[{
                Style[
                 TraditionalForm[
                  Part[
                   Part[$CellContext`stavki$, 1], $CellContext`i]], 
                 12]}], {$CellContext`i, 1, 
               Length[$CellContext`seznam$]}], $CellContext`tv$ = Map[
              $CellContext`ApVerjetnost[$CellContext`svet$], \
$CellContext`seznam$, {2}]}, 
           
           With[{$CellContext`rezult$ = 
             Apply[Plus, $CellContext`tv$, {1}]/$CellContext`k$$}, 
            With[{$CellContext`rez2$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 1]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}], $CellContext`rez3$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 2]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}]}, 
             Pane[
              Text[
               Labeled[
                $CellContext`prikazsveta[$CellContext`svet$], 
                Grid[
                 Join[{{
                    If[$CellContext`showrezult$$, "S", ""], 
                    If[$CellContext`showrezult$$, "P(S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = A | S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = B | S)", ""]}}, 
                  Table[{
                    Style[
                    Part[$CellContext`gr1$, $CellContext`i], 12], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rezult$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez2$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez3$, $CellContext`i], 12], 
                    ""]}, {$CellContext`i, 1, 
                    Length[$CellContext`seznam$]}]]], Right]], 
              ImageSize -> {590, 300}]]]]]]], 
      "Specifications" :> {{{$CellContext`showrezult$$, True, 
          "show results"}, {False, True}, ControlType -> 
         None}, {{$CellContext`k$$, 2, "elements"}, {2, 3, 4, 
         5}}, {{$CellContext`ranint$$, 125}, ControlType -> None}, 
        Button[
        "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
         140]}, "Options" :> {AutorunSequencing -> {2}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{637., {205., 210.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`generatTarski[
         Pattern[$CellContext`i, 
          Blank[]]] := Module[{$CellContext`free = Flatten[
            
            Table[{$CellContext`m, $CellContext`n}, {$CellContext`m, 0, 
              4}, {$CellContext`n, 0, 4}], 
            1], $CellContext`structure = {}, $CellContext`zaodst, \
$CellContext`zasedeni = {}}, Do[$CellContext`nova = Part[$CellContext`free, 
              Random[Integer, {1, 
                Length[$CellContext`free]}]]; $CellContext`sosede = {{
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] + 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] - 
               1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] + 1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] - 1}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] - 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] - 
               1}}; $CellContext`nov = {
              Part[{1, 2, 3, 20, 20, 20}, 
               Random[Integer, {1, 6}]], 
              Random[Integer, {2, 2}], $CellContext`nova, 
              Part[{0, 1, 2, 2}, 
               Random[Integer, {1, 4}]]}; If[
             And[
             Part[$CellContext`nov, 2] == 3, 
              Intersection[$CellContext`zasedeni, $CellContext`sosede] != \
{}], $CellContext`nov = ReplacePart[$CellContext`nov, 
               Random[Integer, {1, 2}], 2]]; $CellContext`structure = 
            Append[$CellContext`structure, $CellContext`nov]; \
$CellContext`zaodst = If[Part[$CellContext`nov, 2] == 3, {
               Part[$CellContext`nov, 3], {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}}, {
               Part[$CellContext`nov, 3]}]; $CellContext`free = 
            Complement[$CellContext`free, $CellContext`zaodst]; \
$CellContext`zasedeni = 
            Union[$CellContext`zasedeni, {$CellContext`nova}], \
{$CellContext`j, 
            1, $CellContext`i}]; $CellContext`structure], $CellContext`nova = \
{3, 4}, $CellContext`sosede = {{4, 5}, {4, 4}, {4, 3}, {3, 5}, {3, 3}, {2, 
        5}, {2, 4}, {2, 3}}, $CellContext`nov = {
        20, 2, {3, 4}, 2}, $CellContext`stpogojni[
         Pattern[$CellContext`k, 
          Blank[]], 
         Pattern[$CellContext`k1, 
          Blank[]], 
         Pattern[$CellContext`k2, 
          Blank[]], 
         Pattern[$CellContext`k3, 
          Blank[]], 
         Pattern[$CellContext`k4, 
          Blank[]], 
         Pattern[$CellContext`k5, 
          Blank[]], 
         Pattern[$CellContext`k6, 
          Blank[]]] := Module[{}, $CellContext`sA = Part[
            $CellContext`atomicPog[$CellContext`k], All, 1]; $CellContext`sAS = 
          Table[
            Part[
             Part[
              Part[
               $CellContext`atomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sA]}]; $CellContext`sN = Part[
            $CellContext`NatomicPog[$CellContext`k], All, 
            1]; $CellContext`sNS = Table[
            Part[
             Part[
              Part[
               $CellContext`NatomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sN]}]; $CellContext`stPP = Part[
            Flatten[
             $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPP]}]; $CellContext`stNP = Part[
            Flatten[
             $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNP]}]; $CellContext`stPN = Part[
            Flatten[
             $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPN]}]; $CellContext`stNN = Part[
            Flatten[
             $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNN]}]; {
           Join[
            
            Part[$CellContext`sA, $CellContext`sk1 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sA], $CellContext`k1]], 
            
            Part[$CellContext`sN, $CellContext`sk2 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sN], $CellContext`k2]], 
            
            Part[$CellContext`stPP, $CellContext`sk3 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPP], $CellContext`k3]], 
            
            Part[$CellContext`stPN, $CellContext`sk4 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPN], $CellContext`k4]], 
            
            Part[$CellContext`stNP, $CellContext`sk5 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNP], $CellContext`k5]], 
            
            Part[$CellContext`stNN, $CellContext`sk6 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNN], $CellContext`k6]]], 
           Join[
            Part[$CellContext`sAS, $CellContext`sk1], 
            Part[$CellContext`sNS, $CellContext`sk2], 
            Part[$CellContext`stPPV, $CellContext`sk3], 
            Part[$CellContext`stPNV, $CellContext`sk4], 
            Part[$CellContext`stNPV, $CellContext`sk5], 
            Part[$CellContext`stNNV, $CellContext`sk6]]}], $CellContext`sA = {
         $CellContext`triangle["X"], 
         $CellContext`square["X"], 
         $CellContext`pentagon["X"], 
         $CellContext`white["X"], 
         $CellContext`gray["X"]}, $CellContext`atomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Part[$CellContext`enomestni, $CellContext`ren]["X"], 
          Table[{
            Part[$CellContext`enomestni, $CellContext`ren][
             Part[$CellContext`individualconstants, $CellContext`rin]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`enomestni = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon, $CellContext`white, \
$CellContext`gray}, $CellContext`individualconstants = {
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
         "L"}, $CellContext`enomestnioznS = {
        "trikotnik", "kvadrat", "petkotnik", "bel", 
         "siv"}, $CellContext`enomestnioznA = {
        "triangle", "square", "pentagon", "white", 
         "gray"}, $CellContext`sAS = {{
          $CellContext`triangle["A"], 
          $CellContext`triangle["B"]}, {
          $CellContext`square["A"], 
          $CellContext`square["B"]}, {
          $CellContext`pentagon["A"], 
          $CellContext`pentagon["B"]}, {
          $CellContext`white["A"], 
          $CellContext`white["B"]}, {
          $CellContext`gray["A"], 
          $CellContext`gray["B"]}}, $CellContext`sN = {
         Not[
          $CellContext`triangle["X"]], 
         Not[
          $CellContext`square["X"]], 
         Not[
          $CellContext`pentagon["X"]], 
         Not[
          $CellContext`white["X"]], 
         Not[
          $CellContext`gray["X"]]}, $CellContext`NatomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Not[
           Part[$CellContext`enomestni, $CellContext`ren]["X"]], 
          Table[{
            Not[
             Part[$CellContext`enomestni, $CellContext`ren][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`sNS = {{
          Not[
           $CellContext`triangle["A"]], 
          Not[
           $CellContext`triangle["B"]]}, {
          Not[
           $CellContext`square["A"]], 
          Not[
           $CellContext`square["B"]]}, {
          Not[
           $CellContext`pentagon["A"]], 
          Not[
           $CellContext`pentagon["B"]]}, {
          Not[
           $CellContext`white["A"]], 
          Not[
           $CellContext`white["B"]]}, {
          Not[
           $CellContext`gray["A"]], 
          Not[
           $CellContext`gray["B"]]}}, $CellContext`stPP = {
         And[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentPozitivEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           Or[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`enomestniBarva = {$CellContext`white, \
$CellContext`gray}, $CellContext`enomestniOblika = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon}, $CellContext`dvomestneIzjavne = {
        And, Or}, $CellContext`enomestnioznSBarva = {
        "bel", "siv"}, $CellContext`enomestnioznSOblika = {
        "trikotnik", "kvadrat", "petkotnik"}, $CellContext`stPPV = {{
          And[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}}, $CellContext`stNP = {
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentNePoEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar je ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa je ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNPV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}}, $CellContext`stPN = {
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentPoNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar ni ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stPNV = {{
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`stNN = {
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentNeNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ne ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNNV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`sk1 = {3, 
        1}, $CellContext`RandomKSubsetH[
         Pattern[$CellContext`kk, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := $CellContext`RandomKsublist[
         Range[$CellContext`kk], $CellContext`k], $CellContext`RandomKsublist[
         Pattern[$CellContext`set, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{$CellContext`sub = {}, $CellContext`rest = $CellContext`set, \
$CellContext`new}, Do[$CellContext`new = Part[$CellContext`rest, 
              RandomInteger[{1, 
                Length[$CellContext`rest]}]]; $CellContext`sub = 
            Append[$CellContext`sub, $CellContext`new]; $CellContext`rest = 
            
            Complement[$CellContext`rest, {$CellContext`new}], \
{$CellContext`k}]; $CellContext`sub], $CellContext`sk2 = {4, 
        3}, $CellContext`sk3 = {12}, $CellContext`sk4 = {
        5}, $CellContext`sk5 = {10}, $CellContext`sk6 = {
        11}, $CellContext`ApVerjetnost[
         Pattern[$CellContext`svet, 
          Blank[]]][
         Pattern[$CellContext`stavek, 
          
          Blank[]]] := $CellContext`Verjetnost[$CellContext`stavek, \
$CellContext`svet], $CellContext`Verjetnost[
         Pattern[$CellContext`formul1, 
          Blank[]], 
         Pattern[$CellContext`svet1, 
          Blank[]]] := 
       Module[{$CellContext`formul2, $CellContext`formul3, \
$CellContext`formul4, $CellContext`sez2, $CellContext`sez3}, \
$CellContext`formul2 = 
          LogicalExpand[$CellContext`formul1]; $CellContext`formul3 = 
          ReplaceAll[$CellContext`formul2, $CellContext`pravila]; \
$CellContext`formul4 = LogicalExpand[$CellContext`formul3]; 
         If[Head[$CellContext`formul4] === Or, $CellContext`sez2 = Table[
              If[Length[
                 Part[$CellContext`formul4, $CellContext`i]] > 1, 
               Apply[List, 
                Part[$CellContext`formul4, $CellContext`i]], {
                Part[$CellContext`formul4, $CellContext`i]}], {$CellContext`i,
                1, 
               
               Length[$CellContext`formul4]}]; \
$CellContext`Prob1[$CellContext`sez2, $CellContext`svet1], 
           If[
           Head[$CellContext`formul4] === 
            And, $CellContext`sez3 = 
             Apply[List, $CellContext`formul4]; \
$CellContext`Valuation[$CellContext`sez3, $CellContext`svet1], 
            If[
             MemberQ[$CellContext`enomestni, 
              Head[$CellContext`formul4]], 
             $CellContext`Prob[$CellContext`formul4, $CellContext`svet1], 
             If[$CellContext`formul4, 1, 0]]]]], $CellContext`pravila = {Not[
           $CellContext`gray[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`white[$CellContext`x], Not[
           $CellContext`white[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`gray[$CellContext`x], Not[
           $CellContext`triangle[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`square[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`square[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`pentagon[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`square[$CellContext`x]], Not[
           $CellContext`small[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`medium[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`medium[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`large[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`medium[$CellContext`x]]}, $CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Val[$CellContext`y, $CellContext`str] - $CellContext`Val[
         Union[$CellContext`x, $CellContext`y], $CellContext`str], \
$CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]], 
          Pattern[$CellContext`z, 
           BlankSequence[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Prob1[{$CellContext`y, $CellContext`z}, $CellContext`str] - \
$CellContext`Prob1[
         Apply[Union, 
          
          Distribute[{{$CellContext`x}, {$CellContext`y, $CellContext`z}}, 
           List], 1], $CellContext`str], $CellContext`Val[
         Pattern[$CellContext`x, 
          Blank[List]], 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Valuation[$CellContext`x, \
$CellContext`str], $CellContext`Valuation[{
          Pattern[$CellContext`form, 
           Blank[]]}, 
         Pattern[$CellContext`structure, 
          
          Blank[]]] := $CellContext`Prob[$CellContext`form, \
$CellContext`structure], $CellContext`Valuation[
         Pattern[$CellContext`list, 
          Blank[]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Length[
           Select[
            Rest[$CellContext`list], $CellContext`contraryQ[
             First[$CellContext`list], #]& ]] > 0, 0, $CellContext`Prob[
           
           First[$CellContext`list], $CellContext`structure] \
$CellContext`Valuation[
           
           Rest[$CellContext`list], $CellContext`structure]], \
$CellContext`Prob[
         $CellContext`large[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 3, 1, 0], $CellContext`Prob[
         $CellContext`medium[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 2, 1, 0], $CellContext`Prob[
         $CellContext`small[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 1, 1, 0], $CellContext`Prob[
         $CellContext`triangle[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`square[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 2, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`pentagon[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 3, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`white[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 0, 0, 1/2]], $CellContext`Prob[
         $CellContext`gray[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 0, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 1, 0, 1/2]], $CellContext`contraryQ[
         Pattern[$CellContext`pred1, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`pred2, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]]] := And[$CellContext`pred1 =!= $CellContext`pred2, 
         Or[
          And[
           MemberQ[$CellContext`shape, $CellContext`pred1], 
           MemberQ[$CellContext`shape, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`colour, $CellContext`pred1], 
           MemberQ[$CellContext`colour, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`largement, $CellContext`pred1], 
           
           MemberQ[$CellContext`largement, $CellContext`pred2]]]], \
$CellContext`shape = {$CellContext`triangle, $CellContext`square, \
$CellContext`pentagon}, $CellContext`colour = {$CellContext`white, \
$CellContext`gray}, $CellContext`largement = {}, $CellContext`prikazsveta[
         Pattern[$CellContext`svet, 
          Blank[]]] := 
       Module[{$CellContext`sv1, $CellContext`sv2}, $CellContext`sv1 = 
          MapIndexed[$CellContext`lik, $CellContext`svet]; $CellContext`sv2 = 
          Map[$CellContext`lik2, $CellContext`svet]; Show[
           
           Graphics[{$CellContext`chessboard, $CellContext`sv1, \
$CellContext`sv2}], AspectRatio -> Automatic, BaseStyle -> {FontSize -> 12}, 
           ImageSize -> 250]], $CellContext`lik[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}, {
          Pattern[$CellContext`i, 
           Blank[]]}] := {{
          GrayLevel[
           If[$CellContext`bar == 0, 0.8, 1]], 
          Polygon[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
               
               Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                2)]}, {$CellContext`n, $CellContext`tip + 2}]]}, 
         If[$CellContext`bar == 2, {
           GrayLevel[0.8], 
           If[
            EvenQ[$CellContext`tip], 
            Polygon[
             Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                 Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                 
                 Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                  2)]}, {$CellContext`n, $CellContext`tip/2 + 2}]], 
            Polygon[
             
             Join[(1/2) {$CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[(2 Pi)/($CellContext`tip + 2)], 
                   Cos[(2 Pi)/($CellContext`tip + 2)]} + $CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[((2 Pi) 2)/($CellContext`tip + 2)], 
                   Cos[((2 Pi) 2)/($CellContext`tip + 2)]}}, 
              Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                  Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                  
                  Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                   2)]}, {$CellContext`n, 2, ($CellContext`tip + 1)/2 + 
                2}]]]]}, {}], {
          GrayLevel[0], 
          Text[
           
           Part[$CellContext`individualconstants, $CellContext`i], \
$CellContext`r + {1/2, 1/2} - ((1/3) $CellContext`vel) {0, 0}], 
          BaseStyle -> {FontSize -> 20}}}, $CellContext`lik2[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}] := {{
          GrayLevel[0.], 
          $CellContext`ClosedLine[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[(2 Pi) ($CellContext`n/($CellContext`tip + 2))], 
               
               Cos[(2 Pi) ($CellContext`n/($CellContext`tip + 
                 2))]}, {$CellContext`n, $CellContext`tip + 
             2}]]}}, $CellContext`ClosedLine[
         Pattern[$CellContext`a, 
          Blank[]]] := Line[
         Append[$CellContext`a, 
          First[$CellContext`a]]], $CellContext`chessboard = {
         Line[{{0, 0}, {0, 5}}], 
         Line[{{0, 0}, {5, 0}}], 
         Line[{{0, 1}, {5, 1}}], 
         Line[{{0, 2}, {5, 2}}], 
         Line[{{0, 3}, {5, 3}}], 
         Line[{{0, 4}, {5, 4}}], 
         Line[{{0, 5}, {5, 5}}], 
         Line[{{1, 0}, {1, 5}}], 
         Line[{{2, 0}, {2, 5}}], 
         Line[{{3, 0}, {3, 5}}], 
         Line[{{4, 0}, {4, 5}}], 
         Line[{{5, 0}, {5, 5}}], {
          GrayLevel[1], 
          
          Line[{{-0.5, -0.5}, {5.5, -0.5}, {5.5, 5.5}, {-0.5, 
           5.5}, {-0.5, -0.5}}]}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->35865558]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
This Demonstration provides examples of total probability and Bayes's \
theorem. In the given world a figure X is randomly chosen. What is the \
probability of the given statement S? Suppose the statement is true. What is \
the probability that X = A? What is the probability that X = B?\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, {3.459420254890625*^9, 3.459420268421875*^9}, {
   3.45942032371875*^9, 3.4594203299375*^9}, {3.4602959814071345`*^9, 
   3.4602959823852324`*^9}, {3.4604104837348223`*^9, 
   3.4604105575610576`*^9}, {3.4606979474375*^9, 3.4606979474375*^9}, {
   3.460698049484375*^9, 3.46069806425*^9}},
 CellID->771110710],

Cell["\<\
If the probability of S is 0, the conditional probability P(X=A|S) is \
undefined (or undecided, denoted by U).\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, {3.46069808928125*^9, 3.460698119890625*^9}, {
   3.460698165609375*^9, 3.46069823215625*^9}, {3.460698418265625*^9, 
   3.460698456703125*^9}, 3.4606984925625*^9, {3.46069915875*^9, 
   3.4606991776875*^9}, {3.460699208640625*^9, 3.460699214296875*^9}, {
   3.460699716765625*^9, 3.46069973471875*^9}, {3.46073041055649*^9, 
   3.4607304289001226`*^9}},
 CellID->471109377],

Cell[TextData[{
 "A simple two-dimensional area is occupied by white or gray triangles, \
squares, and pentagons. A disk means that the shape of  the element is not \
known; in such a case a proposition of type Shape(",
 Cell[BoxData[
  FormBox["x", TraditionalForm]], "InlineMath"],
 ") has probability 1/3. A gray-white figure means that the color of the \
figure is not known; in such a case a proposition of type Color(x) has \
probability 1/2."
}], "ManipulateCaption",
 CellChangeTimes->{
  3.35696210375764*^9, 3.46069794909375*^9, {3.46069853590625*^9, 
   3.46069855825*^9}, {3.4607304379781895`*^9, 3.460730501040286*^9}, 
   3.4616080870987186`*^9},
 CellID->837726494]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 2, $CellContext`ranint$$ = 
    304, $CellContext`showrezult$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`showrezult$$], True, "show results"}, {
      False, True}}, {{
       Hold[$CellContext`k$$], 2, "elements"}, {2, 3, 4, 5}}, {{
       Hold[$CellContext`ranint$$], 304}}, {
      Hold[
       Button[
       "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
        140]], Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    590., {147.5, 152.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`showrezult$2047$$ = 
    False, $CellContext`k$2048$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 2, $CellContext`ranint$$ = 
        304, $CellContext`showrezult$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`showrezult$$, $CellContext`showrezult$2047$$, 
         False], 
        Hold[$CellContext`k$$, $CellContext`k$2048$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      With[{$CellContext`k1$ = 2, $CellContext`k2$ = 2, $CellContext`k3$ = 
         1, $CellContext`k4$ = 1, $CellContext`k5$ = 1, $CellContext`k6$ = 1}, 
        With[{$CellContext`ran$ = 
          SeedRandom[$CellContext`ranint$$], $CellContext`svet$ = \
$CellContext`generatTarski[$CellContext`k$$], $CellContext`stavki$ = \
$CellContext`stpogojni[$CellContext`k$$, $CellContext`k1$, $CellContext`k2$, \
$CellContext`k3$, $CellContext`k4$, $CellContext`k5$, $CellContext`k6$]}, 
         With[{$CellContext`seznam$ = Part[$CellContext`stavki$, 2]}, 
          With[{$CellContext`gr1$ = Table[
              Row[{
                Style[
                 TraditionalForm[
                  Part[
                   Part[$CellContext`stavki$, 1], $CellContext`i]], 
                 12]}], {$CellContext`i, 1, 
               Length[$CellContext`seznam$]}], $CellContext`tv$ = Map[
              $CellContext`ApVerjetnost[$CellContext`svet$], \
$CellContext`seznam$, {2}]}, 
           
           With[{$CellContext`rezult$ = 
             Apply[Plus, $CellContext`tv$, {1}]/$CellContext`k$$}, 
            With[{$CellContext`rez2$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 1]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}], $CellContext`rez3$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 2]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}]}, 
             Pane[
              Text[
               Labeled[
                $CellContext`prikazsveta[$CellContext`svet$], 
                Grid[
                 Join[{{
                    If[$CellContext`showrezult$$, "S", ""], 
                    If[$CellContext`showrezult$$, "P(S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = A | S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = B | S)", ""]}}, 
                  Table[{
                    Style[
                    Part[$CellContext`gr1$, $CellContext`i], 12], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rezult$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez2$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez3$, $CellContext`i], 12], 
                    ""]}, {$CellContext`i, 1, 
                    Length[$CellContext`seznam$]}]]], Right]], 
              ImageSize -> {590, 300}]]]]]]], 
      "Specifications" :> {{{$CellContext`showrezult$$, True, 
          "show results"}, {False, True}, ControlType -> 
         None}, {{$CellContext`k$$, 2, "elements"}, {2, 3, 4, 
         5}}, {{$CellContext`ranint$$, 304}, ControlType -> None}, 
        Button[
        "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
         140]}, "Options" :> {AutorunSequencing -> {2}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{637., {205., 210.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`generatTarski[
         Pattern[$CellContext`i, 
          Blank[]]] := Module[{$CellContext`free = Flatten[
            
            Table[{$CellContext`m, $CellContext`n}, {$CellContext`m, 0, 
              4}, {$CellContext`n, 0, 4}], 
            1], $CellContext`structure = {}, $CellContext`zaodst, \
$CellContext`zasedeni = {}}, Do[$CellContext`nova = Part[$CellContext`free, 
              Random[Integer, {1, 
                Length[$CellContext`free]}]]; $CellContext`sosede = {{
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] + 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] - 
               1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] + 1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] - 1}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] - 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] - 
               1}}; $CellContext`nov = {
              Part[{1, 2, 3, 20, 20, 20}, 
               Random[Integer, {1, 6}]], 
              Random[Integer, {2, 2}], $CellContext`nova, 
              Part[{0, 1, 2, 2}, 
               Random[Integer, {1, 4}]]}; If[
             And[
             Part[$CellContext`nov, 2] == 3, 
              Intersection[$CellContext`zasedeni, $CellContext`sosede] != \
{}], $CellContext`nov = ReplacePart[$CellContext`nov, 
               Random[Integer, {1, 2}], 2]]; $CellContext`structure = 
            Append[$CellContext`structure, $CellContext`nov]; \
$CellContext`zaodst = If[Part[$CellContext`nov, 2] == 3, {
               Part[$CellContext`nov, 3], {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}}, {
               Part[$CellContext`nov, 3]}]; $CellContext`free = 
            Complement[$CellContext`free, $CellContext`zaodst]; \
$CellContext`zasedeni = 
            Union[$CellContext`zasedeni, {$CellContext`nova}], \
{$CellContext`j, 
            1, $CellContext`i}]; $CellContext`structure], $CellContext`nova = \
{3, 4}, $CellContext`sosede = {{4, 5}, {4, 4}, {4, 3}, {3, 5}, {3, 3}, {2, 
        5}, {2, 4}, {2, 3}}, $CellContext`nov = {
        20, 2, {3, 4}, 2}, $CellContext`stpogojni[
         Pattern[$CellContext`k, 
          Blank[]], 
         Pattern[$CellContext`k1, 
          Blank[]], 
         Pattern[$CellContext`k2, 
          Blank[]], 
         Pattern[$CellContext`k3, 
          Blank[]], 
         Pattern[$CellContext`k4, 
          Blank[]], 
         Pattern[$CellContext`k5, 
          Blank[]], 
         Pattern[$CellContext`k6, 
          Blank[]]] := Module[{}, $CellContext`sA = Part[
            $CellContext`atomicPog[$CellContext`k], All, 1]; $CellContext`sAS = 
          Table[
            Part[
             Part[
              Part[
               $CellContext`atomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sA]}]; $CellContext`sN = Part[
            $CellContext`NatomicPog[$CellContext`k], All, 
            1]; $CellContext`sNS = Table[
            Part[
             Part[
              Part[
               $CellContext`NatomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sN]}]; $CellContext`stPP = Part[
            Flatten[
             $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPP]}]; $CellContext`stNP = Part[
            Flatten[
             $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNP]}]; $CellContext`stPN = Part[
            Flatten[
             $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPN]}]; $CellContext`stNN = Part[
            Flatten[
             $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNN]}]; {
           Join[
            
            Part[$CellContext`sA, $CellContext`sk1 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sA], $CellContext`k1]], 
            
            Part[$CellContext`sN, $CellContext`sk2 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sN], $CellContext`k2]], 
            
            Part[$CellContext`stPP, $CellContext`sk3 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPP], $CellContext`k3]], 
            
            Part[$CellContext`stPN, $CellContext`sk4 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPN], $CellContext`k4]], 
            
            Part[$CellContext`stNP, $CellContext`sk5 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNP], $CellContext`k5]], 
            
            Part[$CellContext`stNN, $CellContext`sk6 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNN], $CellContext`k6]]], 
           Join[
            Part[$CellContext`sAS, $CellContext`sk1], 
            Part[$CellContext`sNS, $CellContext`sk2], 
            Part[$CellContext`stPPV, $CellContext`sk3], 
            Part[$CellContext`stPNV, $CellContext`sk4], 
            Part[$CellContext`stNPV, $CellContext`sk5], 
            Part[$CellContext`stNNV, $CellContext`sk6]]}], $CellContext`sA = {
         $CellContext`triangle["X"], 
         $CellContext`square["X"], 
         $CellContext`pentagon["X"], 
         $CellContext`white["X"], 
         $CellContext`gray["X"]}, $CellContext`atomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Part[$CellContext`enomestni, $CellContext`ren]["X"], 
          Table[{
            Part[$CellContext`enomestni, $CellContext`ren][
             Part[$CellContext`individualconstants, $CellContext`rin]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`enomestni = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon, $CellContext`white, \
$CellContext`gray}, $CellContext`individualconstants = {
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
         "L"}, $CellContext`enomestnioznS = {
        "trikotnik", "kvadrat", "petkotnik", "bel", 
         "siv"}, $CellContext`enomestnioznA = {
        "triangle", "square", "pentagon", "white", 
         "gray"}, $CellContext`sAS = {{
          $CellContext`triangle["A"], 
          $CellContext`triangle["B"]}, {
          $CellContext`square["A"], 
          $CellContext`square["B"]}, {
          $CellContext`pentagon["A"], 
          $CellContext`pentagon["B"]}, {
          $CellContext`white["A"], 
          $CellContext`white["B"]}, {
          $CellContext`gray["A"], 
          $CellContext`gray["B"]}}, $CellContext`sN = {
         Not[
          $CellContext`triangle["X"]], 
         Not[
          $CellContext`square["X"]], 
         Not[
          $CellContext`pentagon["X"]], 
         Not[
          $CellContext`white["X"]], 
         Not[
          $CellContext`gray["X"]]}, $CellContext`NatomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Not[
           Part[$CellContext`enomestni, $CellContext`ren]["X"]], 
          Table[{
            Not[
             Part[$CellContext`enomestni, $CellContext`ren][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`sNS = {{
          Not[
           $CellContext`triangle["A"]], 
          Not[
           $CellContext`triangle["B"]]}, {
          Not[
           $CellContext`square["A"]], 
          Not[
           $CellContext`square["B"]]}, {
          Not[
           $CellContext`pentagon["A"]], 
          Not[
           $CellContext`pentagon["B"]]}, {
          Not[
           $CellContext`white["A"]], 
          Not[
           $CellContext`white["B"]]}, {
          Not[
           $CellContext`gray["A"]], 
          Not[
           $CellContext`gray["B"]]}}, $CellContext`stPP = {
         And[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentPozitivEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           Or[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`enomestniBarva = {$CellContext`white, \
$CellContext`gray}, $CellContext`enomestniOblika = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon}, $CellContext`dvomestneIzjavne = {
        And, Or}, $CellContext`enomestnioznSBarva = {
        "bel", "siv"}, $CellContext`enomestnioznSOblika = {
        "trikotnik", "kvadrat", "petkotnik"}, $CellContext`stPPV = {{
          And[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}}, $CellContext`stNP = {
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentNePoEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar je ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa je ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNPV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}}, $CellContext`stPN = {
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentPoNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar ni ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stPNV = {{
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`stNN = {
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentNeNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ne ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNNV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`sk1 = {3, 
        1}, $CellContext`RandomKSubsetH[
         Pattern[$CellContext`kk, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := $CellContext`RandomKsublist[
         Range[$CellContext`kk], $CellContext`k], $CellContext`RandomKsublist[
         Pattern[$CellContext`set, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{$CellContext`sub = {}, $CellContext`rest = $CellContext`set, \
$CellContext`new}, Do[$CellContext`new = Part[$CellContext`rest, 
              RandomInteger[{1, 
                Length[$CellContext`rest]}]]; $CellContext`sub = 
            Append[$CellContext`sub, $CellContext`new]; $CellContext`rest = 
            
            Complement[$CellContext`rest, {$CellContext`new}], \
{$CellContext`k}]; $CellContext`sub], $CellContext`sk2 = {4, 
        3}, $CellContext`sk3 = {12}, $CellContext`sk4 = {
        5}, $CellContext`sk5 = {10}, $CellContext`sk6 = {
        11}, $CellContext`ApVerjetnost[
         Pattern[$CellContext`svet, 
          Blank[]]][
         Pattern[$CellContext`stavek, 
          
          Blank[]]] := $CellContext`Verjetnost[$CellContext`stavek, \
$CellContext`svet], $CellContext`Verjetnost[
         Pattern[$CellContext`formul1, 
          Blank[]], 
         Pattern[$CellContext`svet1, 
          Blank[]]] := 
       Module[{$CellContext`formul2, $CellContext`formul3, \
$CellContext`formul4, $CellContext`sez2, $CellContext`sez3}, \
$CellContext`formul2 = 
          LogicalExpand[$CellContext`formul1]; $CellContext`formul3 = 
          ReplaceAll[$CellContext`formul2, $CellContext`pravila]; \
$CellContext`formul4 = LogicalExpand[$CellContext`formul3]; 
         If[Head[$CellContext`formul4] === Or, $CellContext`sez2 = Table[
              If[Length[
                 Part[$CellContext`formul4, $CellContext`i]] > 1, 
               Apply[List, 
                Part[$CellContext`formul4, $CellContext`i]], {
                Part[$CellContext`formul4, $CellContext`i]}], {$CellContext`i,
                1, 
               
               Length[$CellContext`formul4]}]; \
$CellContext`Prob1[$CellContext`sez2, $CellContext`svet1], 
           If[
           Head[$CellContext`formul4] === 
            And, $CellContext`sez3 = 
             Apply[List, $CellContext`formul4]; \
$CellContext`Valuation[$CellContext`sez3, $CellContext`svet1], 
            If[
             MemberQ[$CellContext`enomestni, 
              Head[$CellContext`formul4]], 
             $CellContext`Prob[$CellContext`formul4, $CellContext`svet1], 
             If[$CellContext`formul4, 1, 0]]]]], $CellContext`pravila = {Not[
           $CellContext`gray[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`white[$CellContext`x], Not[
           $CellContext`white[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`gray[$CellContext`x], Not[
           $CellContext`triangle[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`square[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`square[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`pentagon[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`square[$CellContext`x]], Not[
           $CellContext`small[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`medium[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`medium[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`large[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`medium[$CellContext`x]]}, $CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Val[$CellContext`y, $CellContext`str] - $CellContext`Val[
         Union[$CellContext`x, $CellContext`y], $CellContext`str], \
$CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]], 
          Pattern[$CellContext`z, 
           BlankSequence[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Prob1[{$CellContext`y, $CellContext`z}, $CellContext`str] - \
$CellContext`Prob1[
         Apply[Union, 
          
          Distribute[{{$CellContext`x}, {$CellContext`y, $CellContext`z}}, 
           List], 1], $CellContext`str], $CellContext`Val[
         Pattern[$CellContext`x, 
          Blank[List]], 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Valuation[$CellContext`x, \
$CellContext`str], $CellContext`Valuation[{
          Pattern[$CellContext`form, 
           Blank[]]}, 
         Pattern[$CellContext`structure, 
          
          Blank[]]] := $CellContext`Prob[$CellContext`form, \
$CellContext`structure], $CellContext`Valuation[
         Pattern[$CellContext`list, 
          Blank[]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Length[
           Select[
            Rest[$CellContext`list], $CellContext`contraryQ[
             First[$CellContext`list], #]& ]] > 0, 0, $CellContext`Prob[
           
           First[$CellContext`list], $CellContext`structure] \
$CellContext`Valuation[
           
           Rest[$CellContext`list], $CellContext`structure]], \
$CellContext`Prob[
         $CellContext`large[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 3, 1, 0], $CellContext`Prob[
         $CellContext`medium[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 2, 1, 0], $CellContext`Prob[
         $CellContext`small[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 1, 1, 0], $CellContext`Prob[
         $CellContext`triangle[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`square[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 2, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`pentagon[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 3, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`white[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 0, 0, 1/2]], $CellContext`Prob[
         $CellContext`gray[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 0, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 1, 0, 1/2]], $CellContext`contraryQ[
         Pattern[$CellContext`pred1, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`pred2, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]]] := And[$CellContext`pred1 =!= $CellContext`pred2, 
         Or[
          And[
           MemberQ[$CellContext`shape, $CellContext`pred1], 
           MemberQ[$CellContext`shape, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`colour, $CellContext`pred1], 
           MemberQ[$CellContext`colour, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`largement, $CellContext`pred1], 
           
           MemberQ[$CellContext`largement, $CellContext`pred2]]]], \
$CellContext`shape = {$CellContext`triangle, $CellContext`square, \
$CellContext`pentagon}, $CellContext`colour = {$CellContext`white, \
$CellContext`gray}, $CellContext`largement = {}, $CellContext`prikazsveta[
         Pattern[$CellContext`svet, 
          Blank[]]] := 
       Module[{$CellContext`sv1, $CellContext`sv2}, $CellContext`sv1 = 
          MapIndexed[$CellContext`lik, $CellContext`svet]; $CellContext`sv2 = 
          Map[$CellContext`lik2, $CellContext`svet]; Show[
           
           Graphics[{$CellContext`chessboard, $CellContext`sv1, \
$CellContext`sv2}], AspectRatio -> Automatic, BaseStyle -> {FontSize -> 12}, 
           ImageSize -> 250]], $CellContext`lik[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}, {
          Pattern[$CellContext`i, 
           Blank[]]}] := {{
          GrayLevel[
           If[$CellContext`bar == 0, 0.8, 1]], 
          Polygon[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
               
               Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                2)]}, {$CellContext`n, $CellContext`tip + 2}]]}, 
         If[$CellContext`bar == 2, {
           GrayLevel[0.8], 
           If[
            EvenQ[$CellContext`tip], 
            Polygon[
             Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                 Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                 
                 Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                  2)]}, {$CellContext`n, $CellContext`tip/2 + 2}]], 
            Polygon[
             
             Join[(1/2) {$CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[(2 Pi)/($CellContext`tip + 2)], 
                   Cos[(2 Pi)/($CellContext`tip + 2)]} + $CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[((2 Pi) 2)/($CellContext`tip + 2)], 
                   Cos[((2 Pi) 2)/($CellContext`tip + 2)]}}, 
              Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                  Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                  
                  Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                   2)]}, {$CellContext`n, 2, ($CellContext`tip + 1)/2 + 
                2}]]]]}, {}], {
          GrayLevel[0], 
          Text[
           
           Part[$CellContext`individualconstants, $CellContext`i], \
$CellContext`r + {1/2, 1/2} - ((1/3) $CellContext`vel) {0, 0}], 
          BaseStyle -> {FontSize -> 20}}}, $CellContext`lik2[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}] := {{
          GrayLevel[0.], 
          $CellContext`ClosedLine[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[(2 Pi) ($CellContext`n/($CellContext`tip + 2))], 
               
               Cos[(2 Pi) ($CellContext`n/($CellContext`tip + 
                 2))]}, {$CellContext`n, $CellContext`tip + 
             2}]]}}, $CellContext`ClosedLine[
         Pattern[$CellContext`a, 
          Blank[]]] := Line[
         Append[$CellContext`a, 
          First[$CellContext`a]]], $CellContext`chessboard = {
         Line[{{0, 0}, {0, 5}}], 
         Line[{{0, 0}, {5, 0}}], 
         Line[{{0, 1}, {5, 1}}], 
         Line[{{0, 2}, {5, 2}}], 
         Line[{{0, 3}, {5, 3}}], 
         Line[{{0, 4}, {5, 4}}], 
         Line[{{0, 5}, {5, 5}}], 
         Line[{{1, 0}, {1, 5}}], 
         Line[{{2, 0}, {2, 5}}], 
         Line[{{3, 0}, {3, 5}}], 
         Line[{{4, 0}, {4, 5}}], 
         Line[{{5, 0}, {5, 5}}], {
          GrayLevel[1], 
          
          Line[{{-0.5, -0.5}, {5.5, -0.5}, {5.5, 5.5}, {-0.5, 
           5.5}, {-0.5, -0.5}}]}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->512230660]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 2, $CellContext`ranint$$ = 
    220, $CellContext`showrezult$$ = False, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`showrezult$$], False, "show results"}, {
      False, True}}, {{
       Hold[$CellContext`k$$], 2, "elements"}, {2, 3, 4, 5}}, {{
       Hold[$CellContext`ranint$$], 220}}, {
      Hold[
       Button[
       "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
        140]], Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    590., {147.5, 152.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`showrezult$2106$$ = 
    False, $CellContext`k$2107$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 2, $CellContext`ranint$$ = 
        220, $CellContext`showrezult$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`showrezult$$, $CellContext`showrezult$2106$$, 
         False], 
        Hold[$CellContext`k$$, $CellContext`k$2107$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      With[{$CellContext`k1$ = 2, $CellContext`k2$ = 2, $CellContext`k3$ = 
         1, $CellContext`k4$ = 1, $CellContext`k5$ = 1, $CellContext`k6$ = 1}, 
        With[{$CellContext`ran$ = 
          SeedRandom[$CellContext`ranint$$], $CellContext`svet$ = \
$CellContext`generatTarski[$CellContext`k$$], $CellContext`stavki$ = \
$CellContext`stpogojni[$CellContext`k$$, $CellContext`k1$, $CellContext`k2$, \
$CellContext`k3$, $CellContext`k4$, $CellContext`k5$, $CellContext`k6$]}, 
         With[{$CellContext`seznam$ = Part[$CellContext`stavki$, 2]}, 
          With[{$CellContext`gr1$ = Table[
              Row[{
                Style[
                 TraditionalForm[
                  Part[
                   Part[$CellContext`stavki$, 1], $CellContext`i]], 
                 12]}], {$CellContext`i, 1, 
               Length[$CellContext`seznam$]}], $CellContext`tv$ = Map[
              $CellContext`ApVerjetnost[$CellContext`svet$], \
$CellContext`seznam$, {2}]}, 
           
           With[{$CellContext`rezult$ = 
             Apply[Plus, $CellContext`tv$, {1}]/$CellContext`k$$}, 
            With[{$CellContext`rez2$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 1]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}], $CellContext`rez3$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 2]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}]}, 
             Pane[
              Text[
               Labeled[
                $CellContext`prikazsveta[$CellContext`svet$], 
                Grid[
                 Join[{{
                    If[$CellContext`showrezult$$, "S", ""], 
                    If[$CellContext`showrezult$$, "P(S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = A | S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = B | S)", ""]}}, 
                  Table[{
                    Style[
                    Part[$CellContext`gr1$, $CellContext`i], 12], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rezult$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez2$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez3$, $CellContext`i], 12], 
                    ""]}, {$CellContext`i, 1, 
                    Length[$CellContext`seznam$]}]]], Right]], 
              ImageSize -> {590, 300}]]]]]]], 
      "Specifications" :> {{{$CellContext`showrezult$$, False, 
          "show results"}, {False, True}, ControlType -> 
         None}, {{$CellContext`k$$, 2, "elements"}, {2, 3, 4, 
         5}}, {{$CellContext`ranint$$, 220}, ControlType -> None}, 
        Button[
        "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
         140]}, "Options" :> {AutorunSequencing -> {2}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{637., {205., 210.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`generatTarski[
         Pattern[$CellContext`i, 
          Blank[]]] := Module[{$CellContext`free = Flatten[
            
            Table[{$CellContext`m, $CellContext`n}, {$CellContext`m, 0, 
              4}, {$CellContext`n, 0, 4}], 
            1], $CellContext`structure = {}, $CellContext`zaodst, \
$CellContext`zasedeni = {}}, Do[$CellContext`nova = Part[$CellContext`free, 
              Random[Integer, {1, 
                Length[$CellContext`free]}]]; $CellContext`sosede = {{
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] + 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] - 
               1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] + 1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] - 1}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] - 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] - 
               1}}; $CellContext`nov = {
              Part[{1, 2, 3, 20, 20, 20}, 
               Random[Integer, {1, 6}]], 
              Random[Integer, {2, 2}], $CellContext`nova, 
              Part[{0, 1, 2, 2}, 
               Random[Integer, {1, 4}]]}; If[
             And[
             Part[$CellContext`nov, 2] == 3, 
              Intersection[$CellContext`zasedeni, $CellContext`sosede] != \
{}], $CellContext`nov = ReplacePart[$CellContext`nov, 
               Random[Integer, {1, 2}], 2]]; $CellContext`structure = 
            Append[$CellContext`structure, $CellContext`nov]; \
$CellContext`zaodst = If[Part[$CellContext`nov, 2] == 3, {
               Part[$CellContext`nov, 3], {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}}, {
               Part[$CellContext`nov, 3]}]; $CellContext`free = 
            Complement[$CellContext`free, $CellContext`zaodst]; \
$CellContext`zasedeni = 
            Union[$CellContext`zasedeni, {$CellContext`nova}], \
{$CellContext`j, 
            1, $CellContext`i}]; $CellContext`structure], $CellContext`nova = \
{3, 4}, $CellContext`sosede = {{4, 5}, {4, 4}, {4, 3}, {3, 5}, {3, 3}, {2, 
        5}, {2, 4}, {2, 3}}, $CellContext`nov = {
        20, 2, {3, 4}, 2}, $CellContext`stpogojni[
         Pattern[$CellContext`k, 
          Blank[]], 
         Pattern[$CellContext`k1, 
          Blank[]], 
         Pattern[$CellContext`k2, 
          Blank[]], 
         Pattern[$CellContext`k3, 
          Blank[]], 
         Pattern[$CellContext`k4, 
          Blank[]], 
         Pattern[$CellContext`k5, 
          Blank[]], 
         Pattern[$CellContext`k6, 
          Blank[]]] := Module[{}, $CellContext`sA = Part[
            $CellContext`atomicPog[$CellContext`k], All, 1]; $CellContext`sAS = 
          Table[
            Part[
             Part[
              Part[
               $CellContext`atomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sA]}]; $CellContext`sN = Part[
            $CellContext`NatomicPog[$CellContext`k], All, 
            1]; $CellContext`sNS = Table[
            Part[
             Part[
              Part[
               $CellContext`NatomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sN]}]; $CellContext`stPP = Part[
            Flatten[
             $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPP]}]; $CellContext`stNP = Part[
            Flatten[
             $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNP]}]; $CellContext`stPN = Part[
            Flatten[
             $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPN]}]; $CellContext`stNN = Part[
            Flatten[
             $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNN]}]; {
           Join[
            
            Part[$CellContext`sA, $CellContext`sk1 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sA], $CellContext`k1]], 
            
            Part[$CellContext`sN, $CellContext`sk2 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sN], $CellContext`k2]], 
            
            Part[$CellContext`stPP, $CellContext`sk3 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPP], $CellContext`k3]], 
            
            Part[$CellContext`stPN, $CellContext`sk4 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPN], $CellContext`k4]], 
            
            Part[$CellContext`stNP, $CellContext`sk5 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNP], $CellContext`k5]], 
            
            Part[$CellContext`stNN, $CellContext`sk6 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNN], $CellContext`k6]]], 
           Join[
            Part[$CellContext`sAS, $CellContext`sk1], 
            Part[$CellContext`sNS, $CellContext`sk2], 
            Part[$CellContext`stPPV, $CellContext`sk3], 
            Part[$CellContext`stPNV, $CellContext`sk4], 
            Part[$CellContext`stNPV, $CellContext`sk5], 
            Part[$CellContext`stNNV, $CellContext`sk6]]}], $CellContext`sA = {
         $CellContext`triangle["X"], 
         $CellContext`square["X"], 
         $CellContext`pentagon["X"], 
         $CellContext`white["X"], 
         $CellContext`gray["X"]}, $CellContext`atomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Part[$CellContext`enomestni, $CellContext`ren]["X"], 
          Table[{
            Part[$CellContext`enomestni, $CellContext`ren][
             Part[$CellContext`individualconstants, $CellContext`rin]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`enomestni = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon, $CellContext`white, \
$CellContext`gray}, $CellContext`individualconstants = {
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
         "L"}, $CellContext`enomestnioznS = {
        "trikotnik", "kvadrat", "petkotnik", "bel", 
         "siv"}, $CellContext`enomestnioznA = {
        "triangle", "square", "pentagon", "white", 
         "gray"}, $CellContext`sAS = {{
          $CellContext`triangle["A"], 
          $CellContext`triangle["B"]}, {
          $CellContext`square["A"], 
          $CellContext`square["B"]}, {
          $CellContext`pentagon["A"], 
          $CellContext`pentagon["B"]}, {
          $CellContext`white["A"], 
          $CellContext`white["B"]}, {
          $CellContext`gray["A"], 
          $CellContext`gray["B"]}}, $CellContext`sN = {
         Not[
          $CellContext`triangle["X"]], 
         Not[
          $CellContext`square["X"]], 
         Not[
          $CellContext`pentagon["X"]], 
         Not[
          $CellContext`white["X"]], 
         Not[
          $CellContext`gray["X"]]}, $CellContext`NatomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Not[
           Part[$CellContext`enomestni, $CellContext`ren]["X"]], 
          Table[{
            Not[
             Part[$CellContext`enomestni, $CellContext`ren][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`sNS = {{
          Not[
           $CellContext`triangle["A"]], 
          Not[
           $CellContext`triangle["B"]]}, {
          Not[
           $CellContext`square["A"]], 
          Not[
           $CellContext`square["B"]]}, {
          Not[
           $CellContext`pentagon["A"]], 
          Not[
           $CellContext`pentagon["B"]]}, {
          Not[
           $CellContext`white["A"]], 
          Not[
           $CellContext`white["B"]]}, {
          Not[
           $CellContext`gray["A"]], 
          Not[
           $CellContext`gray["B"]]}}, $CellContext`stPP = {
         And[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentPozitivEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           Or[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`enomestniBarva = {$CellContext`white, \
$CellContext`gray}, $CellContext`enomestniOblika = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon}, $CellContext`dvomestneIzjavne = {
        And, Or}, $CellContext`enomestnioznSBarva = {
        "bel", "siv"}, $CellContext`enomestnioznSOblika = {
        "trikotnik", "kvadrat", "petkotnik"}, $CellContext`stPPV = {{
          And[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}}, $CellContext`stNP = {
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentNePoEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar je ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa je ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNPV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}}, $CellContext`stPN = {
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentPoNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar ni ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stPNV = {{
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`stNN = {
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentNeNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ne ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNNV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`sk1 = {3, 
        1}, $CellContext`RandomKSubsetH[
         Pattern[$CellContext`kk, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := $CellContext`RandomKsublist[
         Range[$CellContext`kk], $CellContext`k], $CellContext`RandomKsublist[
         Pattern[$CellContext`set, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{$CellContext`sub = {}, $CellContext`rest = $CellContext`set, \
$CellContext`new}, Do[$CellContext`new = Part[$CellContext`rest, 
              RandomInteger[{1, 
                Length[$CellContext`rest]}]]; $CellContext`sub = 
            Append[$CellContext`sub, $CellContext`new]; $CellContext`rest = 
            
            Complement[$CellContext`rest, {$CellContext`new}], \
{$CellContext`k}]; $CellContext`sub], $CellContext`sk2 = {4, 
        3}, $CellContext`sk3 = {12}, $CellContext`sk4 = {
        5}, $CellContext`sk5 = {10}, $CellContext`sk6 = {
        11}, $CellContext`ApVerjetnost[
         Pattern[$CellContext`svet, 
          Blank[]]][
         Pattern[$CellContext`stavek, 
          
          Blank[]]] := $CellContext`Verjetnost[$CellContext`stavek, \
$CellContext`svet], $CellContext`Verjetnost[
         Pattern[$CellContext`formul1, 
          Blank[]], 
         Pattern[$CellContext`svet1, 
          Blank[]]] := 
       Module[{$CellContext`formul2, $CellContext`formul3, \
$CellContext`formul4, $CellContext`sez2, $CellContext`sez3}, \
$CellContext`formul2 = 
          LogicalExpand[$CellContext`formul1]; $CellContext`formul3 = 
          ReplaceAll[$CellContext`formul2, $CellContext`pravila]; \
$CellContext`formul4 = LogicalExpand[$CellContext`formul3]; 
         If[Head[$CellContext`formul4] === Or, $CellContext`sez2 = Table[
              If[Length[
                 Part[$CellContext`formul4, $CellContext`i]] > 1, 
               Apply[List, 
                Part[$CellContext`formul4, $CellContext`i]], {
                Part[$CellContext`formul4, $CellContext`i]}], {$CellContext`i,
                1, 
               
               Length[$CellContext`formul4]}]; \
$CellContext`Prob1[$CellContext`sez2, $CellContext`svet1], 
           If[
           Head[$CellContext`formul4] === 
            And, $CellContext`sez3 = 
             Apply[List, $CellContext`formul4]; \
$CellContext`Valuation[$CellContext`sez3, $CellContext`svet1], 
            If[
             MemberQ[$CellContext`enomestni, 
              Head[$CellContext`formul4]], 
             $CellContext`Prob[$CellContext`formul4, $CellContext`svet1], 
             If[$CellContext`formul4, 1, 0]]]]], $CellContext`pravila = {Not[
           $CellContext`gray[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`white[$CellContext`x], Not[
           $CellContext`white[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`gray[$CellContext`x], Not[
           $CellContext`triangle[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`square[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`square[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`pentagon[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`square[$CellContext`x]], Not[
           $CellContext`small[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`medium[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`medium[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`large[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`medium[$CellContext`x]]}, $CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Val[$CellContext`y, $CellContext`str] - $CellContext`Val[
         Union[$CellContext`x, $CellContext`y], $CellContext`str], \
$CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]], 
          Pattern[$CellContext`z, 
           BlankSequence[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Prob1[{$CellContext`y, $CellContext`z}, $CellContext`str] - \
$CellContext`Prob1[
         Apply[Union, 
          
          Distribute[{{$CellContext`x}, {$CellContext`y, $CellContext`z}}, 
           List], 1], $CellContext`str], $CellContext`Val[
         Pattern[$CellContext`x, 
          Blank[List]], 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Valuation[$CellContext`x, \
$CellContext`str], $CellContext`Valuation[{
          Pattern[$CellContext`form, 
           Blank[]]}, 
         Pattern[$CellContext`structure, 
          
          Blank[]]] := $CellContext`Prob[$CellContext`form, \
$CellContext`structure], $CellContext`Valuation[
         Pattern[$CellContext`list, 
          Blank[]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Length[
           Select[
            Rest[$CellContext`list], $CellContext`contraryQ[
             First[$CellContext`list], #]& ]] > 0, 0, $CellContext`Prob[
           
           First[$CellContext`list], $CellContext`structure] \
$CellContext`Valuation[
           
           Rest[$CellContext`list], $CellContext`structure]], \
$CellContext`Prob[
         $CellContext`large[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 3, 1, 0], $CellContext`Prob[
         $CellContext`medium[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 2, 1, 0], $CellContext`Prob[
         $CellContext`small[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 1, 1, 0], $CellContext`Prob[
         $CellContext`triangle[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`square[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 2, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`pentagon[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 3, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`white[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 0, 0, 1/2]], $CellContext`Prob[
         $CellContext`gray[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 0, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 1, 0, 1/2]], $CellContext`contraryQ[
         Pattern[$CellContext`pred1, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`pred2, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]]] := And[$CellContext`pred1 =!= $CellContext`pred2, 
         Or[
          And[
           MemberQ[$CellContext`shape, $CellContext`pred1], 
           MemberQ[$CellContext`shape, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`colour, $CellContext`pred1], 
           MemberQ[$CellContext`colour, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`largement, $CellContext`pred1], 
           
           MemberQ[$CellContext`largement, $CellContext`pred2]]]], \
$CellContext`shape = {$CellContext`triangle, $CellContext`square, \
$CellContext`pentagon}, $CellContext`colour = {$CellContext`white, \
$CellContext`gray}, $CellContext`largement = {}, $CellContext`prikazsveta[
         Pattern[$CellContext`svet, 
          Blank[]]] := 
       Module[{$CellContext`sv1, $CellContext`sv2}, $CellContext`sv1 = 
          MapIndexed[$CellContext`lik, $CellContext`svet]; $CellContext`sv2 = 
          Map[$CellContext`lik2, $CellContext`svet]; Show[
           
           Graphics[{$CellContext`chessboard, $CellContext`sv1, \
$CellContext`sv2}], AspectRatio -> Automatic, BaseStyle -> {FontSize -> 12}, 
           ImageSize -> 250]], $CellContext`lik[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}, {
          Pattern[$CellContext`i, 
           Blank[]]}] := {{
          GrayLevel[
           If[$CellContext`bar == 0, 0.8, 1]], 
          Polygon[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
               
               Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                2)]}, {$CellContext`n, $CellContext`tip + 2}]]}, 
         If[$CellContext`bar == 2, {
           GrayLevel[0.8], 
           If[
            EvenQ[$CellContext`tip], 
            Polygon[
             Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                 Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                 
                 Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                  2)]}, {$CellContext`n, $CellContext`tip/2 + 2}]], 
            Polygon[
             
             Join[(1/2) {$CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[(2 Pi)/($CellContext`tip + 2)], 
                   Cos[(2 Pi)/($CellContext`tip + 2)]} + $CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[((2 Pi) 2)/($CellContext`tip + 2)], 
                   Cos[((2 Pi) 2)/($CellContext`tip + 2)]}}, 
              Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                  Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                  
                  Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                   2)]}, {$CellContext`n, 2, ($CellContext`tip + 1)/2 + 
                2}]]]]}, {}], {
          GrayLevel[0], 
          Text[
           
           Part[$CellContext`individualconstants, $CellContext`i], \
$CellContext`r + {1/2, 1/2} - ((1/3) $CellContext`vel) {0, 0}], 
          BaseStyle -> {FontSize -> 20}}}, $CellContext`lik2[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}] := {{
          GrayLevel[0.], 
          $CellContext`ClosedLine[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[(2 Pi) ($CellContext`n/($CellContext`tip + 2))], 
               
               Cos[(2 Pi) ($CellContext`n/($CellContext`tip + 
                 2))]}, {$CellContext`n, $CellContext`tip + 
             2}]]}}, $CellContext`ClosedLine[
         Pattern[$CellContext`a, 
          Blank[]]] := Line[
         Append[$CellContext`a, 
          First[$CellContext`a]]], $CellContext`chessboard = {
         Line[{{0, 0}, {0, 5}}], 
         Line[{{0, 0}, {5, 0}}], 
         Line[{{0, 1}, {5, 1}}], 
         Line[{{0, 2}, {5, 2}}], 
         Line[{{0, 3}, {5, 3}}], 
         Line[{{0, 4}, {5, 4}}], 
         Line[{{0, 5}, {5, 5}}], 
         Line[{{1, 0}, {1, 5}}], 
         Line[{{2, 0}, {2, 5}}], 
         Line[{{3, 0}, {3, 5}}], 
         Line[{{4, 0}, {4, 5}}], 
         Line[{{5, 0}, {5, 5}}], {
          GrayLevel[1], 
          
          Line[{{-0.5, -0.5}, {5.5, -0.5}, {5.5, 5.5}, {-0.5, 
           5.5}, {-0.5, -0.5}}]}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->833875686],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 2, $CellContext`ranint$$ = 
    238, $CellContext`showrezult$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`showrezult$$], True, "show results"}, {
      False, True}}, {{
       Hold[$CellContext`k$$], 2, "elements"}, {2, 3, 4, 5}}, {{
       Hold[$CellContext`ranint$$], 238}}, {
      Hold[
       Button[
       "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
        140]], Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    590., {147.5, 152.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`showrezult$2165$$ = 
    False, $CellContext`k$2166$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 2, $CellContext`ranint$$ = 
        238, $CellContext`showrezult$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`showrezult$$, $CellContext`showrezult$2165$$, 
         False], 
        Hold[$CellContext`k$$, $CellContext`k$2166$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      With[{$CellContext`k1$ = 2, $CellContext`k2$ = 2, $CellContext`k3$ = 
         1, $CellContext`k4$ = 1, $CellContext`k5$ = 1, $CellContext`k6$ = 1}, 
        With[{$CellContext`ran$ = 
          SeedRandom[$CellContext`ranint$$], $CellContext`svet$ = \
$CellContext`generatTarski[$CellContext`k$$], $CellContext`stavki$ = \
$CellContext`stpogojni[$CellContext`k$$, $CellContext`k1$, $CellContext`k2$, \
$CellContext`k3$, $CellContext`k4$, $CellContext`k5$, $CellContext`k6$]}, 
         With[{$CellContext`seznam$ = Part[$CellContext`stavki$, 2]}, 
          With[{$CellContext`gr1$ = Table[
              Row[{
                Style[
                 TraditionalForm[
                  Part[
                   Part[$CellContext`stavki$, 1], $CellContext`i]], 
                 12]}], {$CellContext`i, 1, 
               Length[$CellContext`seznam$]}], $CellContext`tv$ = Map[
              $CellContext`ApVerjetnost[$CellContext`svet$], \
$CellContext`seznam$, {2}]}, 
           
           With[{$CellContext`rezult$ = 
             Apply[Plus, $CellContext`tv$, {1}]/$CellContext`k$$}, 
            With[{$CellContext`rez2$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 1]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}], $CellContext`rez3$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 2]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}]}, 
             Pane[
              Text[
               Labeled[
                $CellContext`prikazsveta[$CellContext`svet$], 
                Grid[
                 Join[{{
                    If[$CellContext`showrezult$$, "S", ""], 
                    If[$CellContext`showrezult$$, "P(S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = A | S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = B | S)", ""]}}, 
                  Table[{
                    Style[
                    Part[$CellContext`gr1$, $CellContext`i], 12], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rezult$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez2$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez3$, $CellContext`i], 12], 
                    ""]}, {$CellContext`i, 1, 
                    Length[$CellContext`seznam$]}]]], Right]], 
              ImageSize -> {590, 300}]]]]]]], 
      "Specifications" :> {{{$CellContext`showrezult$$, True, 
          "show results"}, {False, True}, ControlType -> 
         None}, {{$CellContext`k$$, 2, "elements"}, {2, 3, 4, 
         5}}, {{$CellContext`ranint$$, 238}, ControlType -> None}, 
        Button[
        "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
         140]}, "Options" :> {AutorunSequencing -> {2}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{637., {205., 210.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`generatTarski[
         Pattern[$CellContext`i, 
          Blank[]]] := Module[{$CellContext`free = Flatten[
            
            Table[{$CellContext`m, $CellContext`n}, {$CellContext`m, 0, 
              4}, {$CellContext`n, 0, 4}], 
            1], $CellContext`structure = {}, $CellContext`zaodst, \
$CellContext`zasedeni = {}}, Do[$CellContext`nova = Part[$CellContext`free, 
              Random[Integer, {1, 
                Length[$CellContext`free]}]]; $CellContext`sosede = {{
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] + 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] - 
               1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] + 1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] - 1}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] - 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] - 
               1}}; $CellContext`nov = {
              Part[{1, 2, 3, 20, 20, 20}, 
               Random[Integer, {1, 6}]], 
              Random[Integer, {2, 2}], $CellContext`nova, 
              Part[{0, 1, 2, 2}, 
               Random[Integer, {1, 4}]]}; If[
             And[
             Part[$CellContext`nov, 2] == 3, 
              Intersection[$CellContext`zasedeni, $CellContext`sosede] != \
{}], $CellContext`nov = ReplacePart[$CellContext`nov, 
               Random[Integer, {1, 2}], 2]]; $CellContext`structure = 
            Append[$CellContext`structure, $CellContext`nov]; \
$CellContext`zaodst = If[Part[$CellContext`nov, 2] == 3, {
               Part[$CellContext`nov, 3], {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}}, {
               Part[$CellContext`nov, 3]}]; $CellContext`free = 
            Complement[$CellContext`free, $CellContext`zaodst]; \
$CellContext`zasedeni = 
            Union[$CellContext`zasedeni, {$CellContext`nova}], \
{$CellContext`j, 
            1, $CellContext`i}]; $CellContext`structure], $CellContext`nova = \
{3, 4}, $CellContext`sosede = {{4, 5}, {4, 4}, {4, 3}, {3, 5}, {3, 3}, {2, 
        5}, {2, 4}, {2, 3}}, $CellContext`nov = {
        20, 2, {3, 4}, 2}, $CellContext`stpogojni[
         Pattern[$CellContext`k, 
          Blank[]], 
         Pattern[$CellContext`k1, 
          Blank[]], 
         Pattern[$CellContext`k2, 
          Blank[]], 
         Pattern[$CellContext`k3, 
          Blank[]], 
         Pattern[$CellContext`k4, 
          Blank[]], 
         Pattern[$CellContext`k5, 
          Blank[]], 
         Pattern[$CellContext`k6, 
          Blank[]]] := Module[{}, $CellContext`sA = Part[
            $CellContext`atomicPog[$CellContext`k], All, 1]; $CellContext`sAS = 
          Table[
            Part[
             Part[
              Part[
               $CellContext`atomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sA]}]; $CellContext`sN = Part[
            $CellContext`NatomicPog[$CellContext`k], All, 
            1]; $CellContext`sNS = Table[
            Part[
             Part[
              Part[
               $CellContext`NatomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sN]}]; $CellContext`stPP = Part[
            Flatten[
             $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPP]}]; $CellContext`stNP = Part[
            Flatten[
             $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNP]}]; $CellContext`stPN = Part[
            Flatten[
             $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPN]}]; $CellContext`stNN = Part[
            Flatten[
             $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNN]}]; {
           Join[
            
            Part[$CellContext`sA, $CellContext`sk1 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sA], $CellContext`k1]], 
            
            Part[$CellContext`sN, $CellContext`sk2 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sN], $CellContext`k2]], 
            
            Part[$CellContext`stPP, $CellContext`sk3 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPP], $CellContext`k3]], 
            
            Part[$CellContext`stPN, $CellContext`sk4 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPN], $CellContext`k4]], 
            
            Part[$CellContext`stNP, $CellContext`sk5 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNP], $CellContext`k5]], 
            
            Part[$CellContext`stNN, $CellContext`sk6 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNN], $CellContext`k6]]], 
           Join[
            Part[$CellContext`sAS, $CellContext`sk1], 
            Part[$CellContext`sNS, $CellContext`sk2], 
            Part[$CellContext`stPPV, $CellContext`sk3], 
            Part[$CellContext`stPNV, $CellContext`sk4], 
            Part[$CellContext`stNPV, $CellContext`sk5], 
            Part[$CellContext`stNNV, $CellContext`sk6]]}], $CellContext`sA = {
         $CellContext`triangle["X"], 
         $CellContext`square["X"], 
         $CellContext`pentagon["X"], 
         $CellContext`white["X"], 
         $CellContext`gray["X"]}, $CellContext`atomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Part[$CellContext`enomestni, $CellContext`ren]["X"], 
          Table[{
            Part[$CellContext`enomestni, $CellContext`ren][
             Part[$CellContext`individualconstants, $CellContext`rin]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`enomestni = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon, $CellContext`white, \
$CellContext`gray}, $CellContext`individualconstants = {
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
         "L"}, $CellContext`enomestnioznS = {
        "trikotnik", "kvadrat", "petkotnik", "bel", 
         "siv"}, $CellContext`enomestnioznA = {
        "triangle", "square", "pentagon", "white", 
         "gray"}, $CellContext`sAS = {{
          $CellContext`triangle["A"], 
          $CellContext`triangle["B"]}, {
          $CellContext`square["A"], 
          $CellContext`square["B"]}, {
          $CellContext`pentagon["A"], 
          $CellContext`pentagon["B"]}, {
          $CellContext`white["A"], 
          $CellContext`white["B"]}, {
          $CellContext`gray["A"], 
          $CellContext`gray["B"]}}, $CellContext`sN = {
         Not[
          $CellContext`triangle["X"]], 
         Not[
          $CellContext`square["X"]], 
         Not[
          $CellContext`pentagon["X"]], 
         Not[
          $CellContext`white["X"]], 
         Not[
          $CellContext`gray["X"]]}, $CellContext`NatomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Not[
           Part[$CellContext`enomestni, $CellContext`ren]["X"]], 
          Table[{
            Not[
             Part[$CellContext`enomestni, $CellContext`ren][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`sNS = {{
          Not[
           $CellContext`triangle["A"]], 
          Not[
           $CellContext`triangle["B"]]}, {
          Not[
           $CellContext`square["A"]], 
          Not[
           $CellContext`square["B"]]}, {
          Not[
           $CellContext`pentagon["A"]], 
          Not[
           $CellContext`pentagon["B"]]}, {
          Not[
           $CellContext`white["A"]], 
          Not[
           $CellContext`white["B"]]}, {
          Not[
           $CellContext`gray["A"]], 
          Not[
           $CellContext`gray["B"]]}}, $CellContext`stPP = {
         And[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentPozitivEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           Or[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`enomestniBarva = {$CellContext`white, \
$CellContext`gray}, $CellContext`enomestniOblika = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon}, $CellContext`dvomestneIzjavne = {
        And, Or}, $CellContext`enomestnioznSBarva = {
        "bel", "siv"}, $CellContext`enomestnioznSOblika = {
        "trikotnik", "kvadrat", "petkotnik"}, $CellContext`stPPV = {{
          And[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}}, $CellContext`stNP = {
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentNePoEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar je ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa je ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNPV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}}, $CellContext`stPN = {
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentPoNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar ni ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stPNV = {{
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`stNN = {
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentNeNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ne ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNNV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`sk1 = {3, 
        1}, $CellContext`RandomKSubsetH[
         Pattern[$CellContext`kk, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := $CellContext`RandomKsublist[
         Range[$CellContext`kk], $CellContext`k], $CellContext`RandomKsublist[
         Pattern[$CellContext`set, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{$CellContext`sub = {}, $CellContext`rest = $CellContext`set, \
$CellContext`new}, Do[$CellContext`new = Part[$CellContext`rest, 
              RandomInteger[{1, 
                Length[$CellContext`rest]}]]; $CellContext`sub = 
            Append[$CellContext`sub, $CellContext`new]; $CellContext`rest = 
            
            Complement[$CellContext`rest, {$CellContext`new}], \
{$CellContext`k}]; $CellContext`sub], $CellContext`sk2 = {4, 
        3}, $CellContext`sk3 = {12}, $CellContext`sk4 = {
        5}, $CellContext`sk5 = {10}, $CellContext`sk6 = {
        11}, $CellContext`ApVerjetnost[
         Pattern[$CellContext`svet, 
          Blank[]]][
         Pattern[$CellContext`stavek, 
          
          Blank[]]] := $CellContext`Verjetnost[$CellContext`stavek, \
$CellContext`svet], $CellContext`Verjetnost[
         Pattern[$CellContext`formul1, 
          Blank[]], 
         Pattern[$CellContext`svet1, 
          Blank[]]] := 
       Module[{$CellContext`formul2, $CellContext`formul3, \
$CellContext`formul4, $CellContext`sez2, $CellContext`sez3}, \
$CellContext`formul2 = 
          LogicalExpand[$CellContext`formul1]; $CellContext`formul3 = 
          ReplaceAll[$CellContext`formul2, $CellContext`pravila]; \
$CellContext`formul4 = LogicalExpand[$CellContext`formul3]; 
         If[Head[$CellContext`formul4] === Or, $CellContext`sez2 = Table[
              If[Length[
                 Part[$CellContext`formul4, $CellContext`i]] > 1, 
               Apply[List, 
                Part[$CellContext`formul4, $CellContext`i]], {
                Part[$CellContext`formul4, $CellContext`i]}], {$CellContext`i,
                1, 
               
               Length[$CellContext`formul4]}]; \
$CellContext`Prob1[$CellContext`sez2, $CellContext`svet1], 
           If[
           Head[$CellContext`formul4] === 
            And, $CellContext`sez3 = 
             Apply[List, $CellContext`formul4]; \
$CellContext`Valuation[$CellContext`sez3, $CellContext`svet1], 
            If[
             MemberQ[$CellContext`enomestni, 
              Head[$CellContext`formul4]], 
             $CellContext`Prob[$CellContext`formul4, $CellContext`svet1], 
             If[$CellContext`formul4, 1, 0]]]]], $CellContext`pravila = {Not[
           $CellContext`gray[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`white[$CellContext`x], Not[
           $CellContext`white[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`gray[$CellContext`x], Not[
           $CellContext`triangle[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`square[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`square[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`pentagon[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`square[$CellContext`x]], Not[
           $CellContext`small[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`medium[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`medium[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`large[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`medium[$CellContext`x]]}, $CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Val[$CellContext`y, $CellContext`str] - $CellContext`Val[
         Union[$CellContext`x, $CellContext`y], $CellContext`str], \
$CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]], 
          Pattern[$CellContext`z, 
           BlankSequence[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Prob1[{$CellContext`y, $CellContext`z}, $CellContext`str] - \
$CellContext`Prob1[
         Apply[Union, 
          
          Distribute[{{$CellContext`x}, {$CellContext`y, $CellContext`z}}, 
           List], 1], $CellContext`str], $CellContext`Val[
         Pattern[$CellContext`x, 
          Blank[List]], 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Valuation[$CellContext`x, \
$CellContext`str], $CellContext`Valuation[{
          Pattern[$CellContext`form, 
           Blank[]]}, 
         Pattern[$CellContext`structure, 
          
          Blank[]]] := $CellContext`Prob[$CellContext`form, \
$CellContext`structure], $CellContext`Valuation[
         Pattern[$CellContext`list, 
          Blank[]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Length[
           Select[
            Rest[$CellContext`list], $CellContext`contraryQ[
             First[$CellContext`list], #]& ]] > 0, 0, $CellContext`Prob[
           
           First[$CellContext`list], $CellContext`structure] \
$CellContext`Valuation[
           
           Rest[$CellContext`list], $CellContext`structure]], \
$CellContext`Prob[
         $CellContext`large[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 3, 1, 0], $CellContext`Prob[
         $CellContext`medium[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 2, 1, 0], $CellContext`Prob[
         $CellContext`small[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 1, 1, 0], $CellContext`Prob[
         $CellContext`triangle[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`square[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 2, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`pentagon[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 3, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`white[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 0, 0, 1/2]], $CellContext`Prob[
         $CellContext`gray[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 0, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 1, 0, 1/2]], $CellContext`contraryQ[
         Pattern[$CellContext`pred1, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`pred2, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]]] := And[$CellContext`pred1 =!= $CellContext`pred2, 
         Or[
          And[
           MemberQ[$CellContext`shape, $CellContext`pred1], 
           MemberQ[$CellContext`shape, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`colour, $CellContext`pred1], 
           MemberQ[$CellContext`colour, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`largement, $CellContext`pred1], 
           
           MemberQ[$CellContext`largement, $CellContext`pred2]]]], \
$CellContext`shape = {$CellContext`triangle, $CellContext`square, \
$CellContext`pentagon}, $CellContext`colour = {$CellContext`white, \
$CellContext`gray}, $CellContext`largement = {}, $CellContext`prikazsveta[
         Pattern[$CellContext`svet, 
          Blank[]]] := 
       Module[{$CellContext`sv1, $CellContext`sv2}, $CellContext`sv1 = 
          MapIndexed[$CellContext`lik, $CellContext`svet]; $CellContext`sv2 = 
          Map[$CellContext`lik2, $CellContext`svet]; Show[
           
           Graphics[{$CellContext`chessboard, $CellContext`sv1, \
$CellContext`sv2}], AspectRatio -> Automatic, BaseStyle -> {FontSize -> 12}, 
           ImageSize -> 250]], $CellContext`lik[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}, {
          Pattern[$CellContext`i, 
           Blank[]]}] := {{
          GrayLevel[
           If[$CellContext`bar == 0, 0.8, 1]], 
          Polygon[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
               
               Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                2)]}, {$CellContext`n, $CellContext`tip + 2}]]}, 
         If[$CellContext`bar == 2, {
           GrayLevel[0.8], 
           If[
            EvenQ[$CellContext`tip], 
            Polygon[
             Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                 Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                 
                 Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                  2)]}, {$CellContext`n, $CellContext`tip/2 + 2}]], 
            Polygon[
             
             Join[(1/2) {$CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[(2 Pi)/($CellContext`tip + 2)], 
                   Cos[(2 Pi)/($CellContext`tip + 2)]} + $CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[((2 Pi) 2)/($CellContext`tip + 2)], 
                   Cos[((2 Pi) 2)/($CellContext`tip + 2)]}}, 
              Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                  Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                  
                  Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                   2)]}, {$CellContext`n, 2, ($CellContext`tip + 1)/2 + 
                2}]]]]}, {}], {
          GrayLevel[0], 
          Text[
           
           Part[$CellContext`individualconstants, $CellContext`i], \
$CellContext`r + {1/2, 1/2} - ((1/3) $CellContext`vel) {0, 0}], 
          BaseStyle -> {FontSize -> 20}}}, $CellContext`lik2[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}] := {{
          GrayLevel[0.], 
          $CellContext`ClosedLine[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[(2 Pi) ($CellContext`n/($CellContext`tip + 2))], 
               
               Cos[(2 Pi) ($CellContext`n/($CellContext`tip + 
                 2))]}, {$CellContext`n, $CellContext`tip + 
             2}]]}}, $CellContext`ClosedLine[
         Pattern[$CellContext`a, 
          Blank[]]] := Line[
         Append[$CellContext`a, 
          First[$CellContext`a]]], $CellContext`chessboard = {
         Line[{{0, 0}, {0, 5}}], 
         Line[{{0, 0}, {5, 0}}], 
         Line[{{0, 1}, {5, 1}}], 
         Line[{{0, 2}, {5, 2}}], 
         Line[{{0, 3}, {5, 3}}], 
         Line[{{0, 4}, {5, 4}}], 
         Line[{{0, 5}, {5, 5}}], 
         Line[{{1, 0}, {1, 5}}], 
         Line[{{2, 0}, {2, 5}}], 
         Line[{{3, 0}, {3, 5}}], 
         Line[{{4, 0}, {4, 5}}], 
         Line[{{5, 0}, {5, 5}}], {
          GrayLevel[1], 
          
          Line[{{-0.5, -0.5}, {5.5, -0.5}, {5.5, 5.5}, {-0.5, 
           5.5}, {-0.5, -0.5}}]}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->877125576],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 4, $CellContext`ranint$$ = 
    220, $CellContext`showrezult$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`showrezult$$], True, "show results"}, {
      False, True}}, {{
       Hold[$CellContext`k$$], 4, "elements"}, {2, 3, 4, 5}}, {{
       Hold[$CellContext`ranint$$], 220}}, {
      Hold[
       Button[
       "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
        140]], Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    590., {147.5, 152.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`showrezult$2224$$ = 
    False, $CellContext`k$2225$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 4, $CellContext`ranint$$ = 
        220, $CellContext`showrezult$$ = True}, "ControllerVariables" :> {
        Hold[$CellContext`showrezult$$, $CellContext`showrezult$2224$$, 
         False], 
        Hold[$CellContext`k$$, $CellContext`k$2225$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      With[{$CellContext`k1$ = 2, $CellContext`k2$ = 2, $CellContext`k3$ = 
         1, $CellContext`k4$ = 1, $CellContext`k5$ = 1, $CellContext`k6$ = 1}, 
        With[{$CellContext`ran$ = 
          SeedRandom[$CellContext`ranint$$], $CellContext`svet$ = \
$CellContext`generatTarski[$CellContext`k$$], $CellContext`stavki$ = \
$CellContext`stpogojni[$CellContext`k$$, $CellContext`k1$, $CellContext`k2$, \
$CellContext`k3$, $CellContext`k4$, $CellContext`k5$, $CellContext`k6$]}, 
         With[{$CellContext`seznam$ = Part[$CellContext`stavki$, 2]}, 
          With[{$CellContext`gr1$ = Table[
              Row[{
                Style[
                 TraditionalForm[
                  Part[
                   Part[$CellContext`stavki$, 1], $CellContext`i]], 
                 12]}], {$CellContext`i, 1, 
               Length[$CellContext`seznam$]}], $CellContext`tv$ = Map[
              $CellContext`ApVerjetnost[$CellContext`svet$], \
$CellContext`seznam$, {2}]}, 
           
           With[{$CellContext`rezult$ = 
             Apply[Plus, $CellContext`tv$, {1}]/$CellContext`k$$}, 
            With[{$CellContext`rez2$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 1]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}], $CellContext`rez3$ = Table[
                If[
                Part[$CellContext`rezult$, $CellContext`i] == 0, "U", 
                 Part[$CellContext`tv$, $CellContext`i, 2]/($CellContext`k$$ 
                 Part[$CellContext`rezult$, $CellContext`i])], \
{$CellContext`i, 1, 
                 Length[$CellContext`seznam$]}]}, 
             Pane[
              Text[
               Labeled[
                $CellContext`prikazsveta[$CellContext`svet$], 
                Grid[
                 Join[{{
                    If[$CellContext`showrezult$$, "S", ""], 
                    If[$CellContext`showrezult$$, "P(S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = A | S)", ""], 
                    If[$CellContext`showrezult$$, "P(X = B | S)", ""]}}, 
                  Table[{
                    Style[
                    Part[$CellContext`gr1$, $CellContext`i], 12], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rezult$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez2$, $CellContext`i], 12], ""], 
                    If[$CellContext`showrezult$$, 
                    Style[
                    Part[$CellContext`rez3$, $CellContext`i], 12], 
                    ""]}, {$CellContext`i, 1, 
                    Length[$CellContext`seznam$]}]]], Right]], 
              ImageSize -> {590, 300}]]]]]]], 
      "Specifications" :> {{{$CellContext`showrezult$$, True, 
          "show results"}, {False, True}, ControlType -> 
         None}, {{$CellContext`k$$, 4, "elements"}, {2, 3, 4, 
         5}}, {{$CellContext`ranint$$, 220}, ControlType -> None}, 
        Button[
        "reset", $CellContext`ranint$$ = RandomInteger[{1, 1000}], ImageSize -> 
         140]}, "Options" :> {AutorunSequencing -> {2}}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{637., {205., 210.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`generatTarski[
         Pattern[$CellContext`i, 
          Blank[]]] := Module[{$CellContext`free = Flatten[
            
            Table[{$CellContext`m, $CellContext`n}, {$CellContext`m, 0, 
              4}, {$CellContext`n, 0, 4}], 
            1], $CellContext`structure = {}, $CellContext`zaodst, \
$CellContext`zasedeni = {}}, Do[$CellContext`nova = Part[$CellContext`free, 
              Random[Integer, {1, 
                Length[$CellContext`free]}]]; $CellContext`sosede = {{
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] + 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] + 1, Part[$CellContext`nova, 2] - 
               1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] + 1}, {
               Part[$CellContext`nova, 1], Part[$CellContext`nova, 2] - 1}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] + 
               1}, {Part[$CellContext`nova, 1] - 1, 
               Part[$CellContext`nova, 2]}, {
              Part[$CellContext`nova, 1] - 1, Part[$CellContext`nova, 2] - 
               1}}; $CellContext`nov = {
              Part[{1, 2, 3, 20, 20, 20}, 
               Random[Integer, {1, 6}]], 
              Random[Integer, {2, 2}], $CellContext`nova, 
              Part[{0, 1, 2, 2}, 
               Random[Integer, {1, 4}]]}; If[
             And[
             Part[$CellContext`nov, 2] == 3, 
              Intersection[$CellContext`zasedeni, $CellContext`sosede] != \
{}], $CellContext`nov = ReplacePart[$CellContext`nov, 
               Random[Integer, {1, 2}], 2]]; $CellContext`structure = 
            Append[$CellContext`structure, $CellContext`nov]; \
$CellContext`zaodst = If[Part[$CellContext`nov, 2] == 3, {
               Part[$CellContext`nov, 3], {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] + 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {
                Part[
                 Part[$CellContext`nov, 3], 1], Part[
                  Part[$CellContext`nov, 3], 2] - 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] + 1}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, 
                Part[
                 Part[$CellContext`nov, 3], 2]}, {Part[
                  Part[$CellContext`nov, 3], 1] - 1, Part[
                  Part[$CellContext`nov, 3], 2] - 1}}, {
               Part[$CellContext`nov, 3]}]; $CellContext`free = 
            Complement[$CellContext`free, $CellContext`zaodst]; \
$CellContext`zasedeni = 
            Union[$CellContext`zasedeni, {$CellContext`nova}], \
{$CellContext`j, 
            1, $CellContext`i}]; $CellContext`structure], $CellContext`nova = \
{3, 4}, $CellContext`sosede = {{4, 5}, {4, 4}, {4, 3}, {3, 5}, {3, 3}, {2, 
        5}, {2, 4}, {2, 3}}, $CellContext`nov = {
        20, 2, {3, 4}, 2}, $CellContext`stpogojni[
         Pattern[$CellContext`k, 
          Blank[]], 
         Pattern[$CellContext`k1, 
          Blank[]], 
         Pattern[$CellContext`k2, 
          Blank[]], 
         Pattern[$CellContext`k3, 
          Blank[]], 
         Pattern[$CellContext`k4, 
          Blank[]], 
         Pattern[$CellContext`k5, 
          Blank[]], 
         Pattern[$CellContext`k6, 
          Blank[]]] := Module[{}, $CellContext`sA = Part[
            $CellContext`atomicPog[$CellContext`k], All, 1]; $CellContext`sAS = 
          Table[
            Part[
             Part[
              Part[
               $CellContext`atomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sA]}]; $CellContext`sN = Part[
            $CellContext`NatomicPog[$CellContext`k], All, 
            1]; $CellContext`sNS = Table[
            Part[
             Part[
              Part[
               $CellContext`NatomicPog[$CellContext`k], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`sN]}]; $CellContext`stPP = Part[
            Flatten[
             $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPozitivEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPP]}]; $CellContext`stNP = Part[
            Flatten[
             $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNPV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNePoEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNP]}]; $CellContext`stPN = Part[
            Flatten[
             $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stPNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentPoNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stPN]}]; $CellContext`stNN = Part[
            Flatten[
             $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
            1]; $CellContext`stNNV = Table[
            Part[
             Part[
              Part[
               Flatten[
                $CellContext`molsentNeNeEnaPog[$CellContext`k], 2], All, 
               2], $CellContext`i], All, 1], {$CellContext`i, 1, 
             Length[$CellContext`stNN]}]; {
           Join[
            
            Part[$CellContext`sA, $CellContext`sk1 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sA], $CellContext`k1]], 
            
            Part[$CellContext`sN, $CellContext`sk2 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`sN], $CellContext`k2]], 
            
            Part[$CellContext`stPP, $CellContext`sk3 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPP], $CellContext`k3]], 
            
            Part[$CellContext`stPN, $CellContext`sk4 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stPN], $CellContext`k4]], 
            
            Part[$CellContext`stNP, $CellContext`sk5 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNP], $CellContext`k5]], 
            
            Part[$CellContext`stNN, $CellContext`sk6 = \
$CellContext`RandomKSubsetH[
               Length[$CellContext`stNN], $CellContext`k6]]], 
           Join[
            Part[$CellContext`sAS, $CellContext`sk1], 
            Part[$CellContext`sNS, $CellContext`sk2], 
            Part[$CellContext`stPPV, $CellContext`sk3], 
            Part[$CellContext`stPNV, $CellContext`sk4], 
            Part[$CellContext`stNPV, $CellContext`sk5], 
            Part[$CellContext`stNNV, $CellContext`sk6]]}], $CellContext`sA = {
         $CellContext`triangle["X"], 
         $CellContext`square["X"], 
         $CellContext`pentagon["X"], 
         $CellContext`white["X"], 
         $CellContext`gray["X"]}, $CellContext`atomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Part[$CellContext`enomestni, $CellContext`ren]["X"], 
          Table[{
            Part[$CellContext`enomestni, $CellContext`ren][
             Part[$CellContext`individualconstants, $CellContext`rin]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`enomestni = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon, $CellContext`white, \
$CellContext`gray}, $CellContext`individualconstants = {
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
         "L"}, $CellContext`enomestnioznS = {
        "trikotnik", "kvadrat", "petkotnik", "bel", 
         "siv"}, $CellContext`enomestnioznA = {
        "triangle", "square", "pentagon", "white", 
         "gray"}, $CellContext`sAS = {{
          $CellContext`triangle["A"], 
          $CellContext`triangle["B"]}, {
          $CellContext`square["A"], 
          $CellContext`square["B"]}, {
          $CellContext`pentagon["A"], 
          $CellContext`pentagon["B"]}, {
          $CellContext`white["A"], 
          $CellContext`white["B"]}, {
          $CellContext`gray["A"], 
          $CellContext`gray["B"]}}, $CellContext`sN = {
         Not[
          $CellContext`triangle["X"]], 
         Not[
          $CellContext`square["X"]], 
         Not[
          $CellContext`pentagon["X"]], 
         Not[
          $CellContext`white["X"]], 
         Not[
          $CellContext`gray["X"]]}, $CellContext`NatomicPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          Not[
           Part[$CellContext`enomestni, $CellContext`ren]["X"]], 
          Table[{
            Not[
             Part[$CellContext`enomestni, $CellContext`ren][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            StringJoin["lik ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " je ", 
             Part[$CellContext`enomestnioznS, $CellContext`ren]], 
            StringJoin["figure ", 
             Part[$CellContext`individualconstants, $CellContext`rin], " is ", 
             
             Part[$CellContext`enomestnioznA, $CellContext`ren]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`ren, 1, 
          5}], $CellContext`sNS = {{
          Not[
           $CellContext`triangle["A"]], 
          Not[
           $CellContext`triangle["B"]]}, {
          Not[
           $CellContext`square["A"]], 
          Not[
           $CellContext`square["B"]]}, {
          Not[
           $CellContext`pentagon["A"]], 
          Not[
           $CellContext`pentagon["B"]]}, {
          Not[
           $CellContext`white["A"]], 
          Not[
           $CellContext`white["B"]]}, {
          Not[
           $CellContext`gray["A"]], 
          Not[
           $CellContext`gray["B"]]}}, $CellContext`stPP = {
         And[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`triangle["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`square["X"]], 
         And[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`white["X"], 
          $CellContext`pentagon["X"]], 
         And[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]], 
         Or[
          $CellContext`gray["X"], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentPozitivEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           Or[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`enomestniBarva = {$CellContext`white, \
$CellContext`gray}, $CellContext`enomestniOblika = {$CellContext`triangle, \
$CellContext`square, $CellContext`pentagon}, $CellContext`dvomestneIzjavne = {
        And, Or}, $CellContext`enomestnioznSBarva = {
        "bel", "siv"}, $CellContext`enomestnioznSOblika = {
        "trikotnik", "kvadrat", "petkotnik"}, $CellContext`stPPV = {{
          And[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`triangle["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`triangle["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`square["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`square["B"]]}, {
          And[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`white["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`white["B"], 
           $CellContext`pentagon["B"]]}, {
          And[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          And[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}, {
          Or[
           $CellContext`gray["A"], 
           $CellContext`pentagon["A"]], 
          Or[
           $CellContext`gray["B"], 
           $CellContext`pentagon["B"]]}}, $CellContext`stNP = {
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`triangle["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`square["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`white["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          $CellContext`pentagon["X"]]}, $CellContext`molsentNePoEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Part[$CellContext`enomestniOblika, $CellContext`obl][
              Part[$CellContext`individualconstants, $CellContext`rin]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar je ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa je ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNPV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`triangle["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`triangle["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`square["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`square["B"]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           $CellContext`pentagon["B"]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           $CellContext`pentagon["A"]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           $CellContext`pentagon["B"]]}}, $CellContext`stPN = {
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`square["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`white["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          $CellContext`gray["X"], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentPoNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Part[$CellContext`enomestniBarva, $CellContext`bar]["X"], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Part[$CellContext`enomestniBarva, $CellContext`bar][
              Part[$CellContext`individualconstants, $CellContext`rin]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " vendar ni ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " je ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stPNV = {{
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`white["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`white["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           $CellContext`gray["A"], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           $CellContext`gray["B"], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`stNN = {
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`triangle["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`square["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`white["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]], 
         And[
          Not[
           $CellContext`gray["X"]], 
          Not[
           $CellContext`pentagon["X"]]]}, $CellContext`molsentNeNeEnaPog[
         Pattern[$CellContext`k, 
          Blank[]]] := Table[{
          If[$CellContext`dvo == 1, 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]], 
           And[
            Not[
             Part[$CellContext`enomestniBarva, $CellContext`bar]["X"]], 
            Not[
             Part[$CellContext`enomestniOblika, $CellContext`obl]["X"]]]], 
          Table[{
            Part[$CellContext`dvomestneIzjavne, $CellContext`dvo][
             Not[
              Part[$CellContext`enomestniBarva, $CellContext`bar][
               Part[$CellContext`individualconstants, $CellContext`rin]]], 
             Not[
              Part[$CellContext`enomestniOblika, $CellContext`obl][
               Part[$CellContext`individualconstants, $CellContext`rin]]]], 
            If[$CellContext`dvo == 1, 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], " ne ", 
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]], 
             StringJoin["lik ", 
              Part[$CellContext`individualconstants, $CellContext`rin], 
              " ni ", 
              Part[$CellContext`enomestnioznSBarva, $CellContext`bar], 
              " ali pa ni ", 
              
              Part[$CellContext`enomestnioznSOblika, $CellContext`obl]]]}, \
{$CellContext`rin, 1, $CellContext`k}]}, {$CellContext`obl, 1, 
          3}, {$CellContext`bar, 1, 2}, {$CellContext`dvo, 1, 
          2}], $CellContext`stNNV = {{
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`triangle["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`triangle["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`square["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`square["B"]]]}, {
          And[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`white["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`white["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          And[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          And[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}, {
          Or[
           Not[
            $CellContext`gray["A"]], 
           Not[
            $CellContext`pentagon["A"]]], 
          Or[
           Not[
            $CellContext`gray["B"]], 
           Not[
            $CellContext`pentagon["B"]]]}}, $CellContext`sk1 = {3, 
        1}, $CellContext`RandomKSubsetH[
         Pattern[$CellContext`kk, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := $CellContext`RandomKsublist[
         Range[$CellContext`kk], $CellContext`k], $CellContext`RandomKsublist[
         Pattern[$CellContext`set, 
          Blank[]], 
         Pattern[$CellContext`k, 
          Blank[]]] := 
       Module[{$CellContext`sub = {}, $CellContext`rest = $CellContext`set, \
$CellContext`new}, Do[$CellContext`new = Part[$CellContext`rest, 
              RandomInteger[{1, 
                Length[$CellContext`rest]}]]; $CellContext`sub = 
            Append[$CellContext`sub, $CellContext`new]; $CellContext`rest = 
            
            Complement[$CellContext`rest, {$CellContext`new}], \
{$CellContext`k}]; $CellContext`sub], $CellContext`sk2 = {4, 
        3}, $CellContext`sk3 = {12}, $CellContext`sk4 = {
        5}, $CellContext`sk5 = {10}, $CellContext`sk6 = {
        11}, $CellContext`ApVerjetnost[
         Pattern[$CellContext`svet, 
          Blank[]]][
         Pattern[$CellContext`stavek, 
          
          Blank[]]] := $CellContext`Verjetnost[$CellContext`stavek, \
$CellContext`svet], $CellContext`Verjetnost[
         Pattern[$CellContext`formul1, 
          Blank[]], 
         Pattern[$CellContext`svet1, 
          Blank[]]] := 
       Module[{$CellContext`formul2, $CellContext`formul3, \
$CellContext`formul4, $CellContext`sez2, $CellContext`sez3}, \
$CellContext`formul2 = 
          LogicalExpand[$CellContext`formul1]; $CellContext`formul3 = 
          ReplaceAll[$CellContext`formul2, $CellContext`pravila]; \
$CellContext`formul4 = LogicalExpand[$CellContext`formul3]; 
         If[Head[$CellContext`formul4] === Or, $CellContext`sez2 = Table[
              If[Length[
                 Part[$CellContext`formul4, $CellContext`i]] > 1, 
               Apply[List, 
                Part[$CellContext`formul4, $CellContext`i]], {
                Part[$CellContext`formul4, $CellContext`i]}], {$CellContext`i,
                1, 
               
               Length[$CellContext`formul4]}]; \
$CellContext`Prob1[$CellContext`sez2, $CellContext`svet1], 
           If[
           Head[$CellContext`formul4] === 
            And, $CellContext`sez3 = 
             Apply[List, $CellContext`formul4]; \
$CellContext`Valuation[$CellContext`sez3, $CellContext`svet1], 
            If[
             MemberQ[$CellContext`enomestni, 
              Head[$CellContext`formul4]], 
             $CellContext`Prob[$CellContext`formul4, $CellContext`svet1], 
             If[$CellContext`formul4, 1, 0]]]]], $CellContext`pravila = {Not[
           $CellContext`gray[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`white[$CellContext`x], Not[
           $CellContext`white[
            Pattern[$CellContext`x, 
             Blank[]]]] -> $CellContext`gray[$CellContext`x], Not[
           $CellContext`triangle[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`square[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`square[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`pentagon[$CellContext`x]], Not[
           $CellContext`pentagon[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`triangle[$CellContext`x], 
           $CellContext`square[$CellContext`x]], Not[
           $CellContext`small[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`medium[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`medium[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`large[$CellContext`x]], Not[
           $CellContext`large[
            Pattern[$CellContext`x, 
             Blank[]]]] -> Or[
           $CellContext`small[$CellContext`x], 
           $CellContext`medium[$CellContext`x]]}, $CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Val[$CellContext`y, $CellContext`str] - $CellContext`Val[
         Union[$CellContext`x, $CellContext`y], $CellContext`str], \
$CellContext`Prob1[{
          Pattern[$CellContext`x, 
           Blank[List]], 
          Pattern[$CellContext`y, 
           Blank[List]], 
          Pattern[$CellContext`z, 
           BlankSequence[List]]}, 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Val[$CellContext`x, $CellContext`str] + \
$CellContext`Prob1[{$CellContext`y, $CellContext`z}, $CellContext`str] - \
$CellContext`Prob1[
         Apply[Union, 
          
          Distribute[{{$CellContext`x}, {$CellContext`y, $CellContext`z}}, 
           List], 1], $CellContext`str], $CellContext`Val[
         Pattern[$CellContext`x, 
          Blank[List]], 
         Pattern[$CellContext`str, 
          
          Blank[]]] := $CellContext`Valuation[$CellContext`x, \
$CellContext`str], $CellContext`Valuation[{
          Pattern[$CellContext`form, 
           Blank[]]}, 
         Pattern[$CellContext`structure, 
          
          Blank[]]] := $CellContext`Prob[$CellContext`form, \
$CellContext`structure], $CellContext`Valuation[
         Pattern[$CellContext`list, 
          Blank[]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Length[
           Select[
            Rest[$CellContext`list], $CellContext`contraryQ[
             First[$CellContext`list], #]& ]] > 0, 0, $CellContext`Prob[
           
           First[$CellContext`list], $CellContext`structure] \
$CellContext`Valuation[
           
           Rest[$CellContext`list], $CellContext`structure]], \
$CellContext`Prob[
         $CellContext`large[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 3, 1, 0], $CellContext`Prob[
         $CellContext`medium[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 2, 1, 0], $CellContext`Prob[
         $CellContext`small[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           2] == 1, 1, 0], $CellContext`Prob[
         $CellContext`triangle[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`square[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 2, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`pentagon[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           1] == 3, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            1] == 20, 1/3, 0]], $CellContext`Prob[
         $CellContext`white[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 1, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 0, 0, 1/2]], $CellContext`Prob[
         $CellContext`gray[
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`structure, 
          Blank[]]] := If[Part[
           Part[$CellContext`structure, 
            First[
             First[
              Position[$CellContext`individualconstants, $CellContext`x]]]], 
           4] == 0, 1, 
         If[Part[
            Part[$CellContext`structure, 
             First[
              First[
               Position[$CellContext`individualconstants, $CellContext`x]]]], 
            4] == 1, 0, 1/2]], $CellContext`contraryQ[
         Pattern[$CellContext`pred1, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]], 
         Pattern[$CellContext`pred2, 
          Blank[]][
          Pattern[$CellContext`x, 
           Blank[]]]] := And[$CellContext`pred1 =!= $CellContext`pred2, 
         Or[
          And[
           MemberQ[$CellContext`shape, $CellContext`pred1], 
           MemberQ[$CellContext`shape, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`colour, $CellContext`pred1], 
           MemberQ[$CellContext`colour, $CellContext`pred2]], 
          And[
           MemberQ[$CellContext`largement, $CellContext`pred1], 
           
           MemberQ[$CellContext`largement, $CellContext`pred2]]]], \
$CellContext`shape = {$CellContext`triangle, $CellContext`square, \
$CellContext`pentagon}, $CellContext`colour = {$CellContext`white, \
$CellContext`gray}, $CellContext`largement = {}, $CellContext`prikazsveta[
         Pattern[$CellContext`svet, 
          Blank[]]] := 
       Module[{$CellContext`sv1, $CellContext`sv2}, $CellContext`sv1 = 
          MapIndexed[$CellContext`lik, $CellContext`svet]; $CellContext`sv2 = 
          Map[$CellContext`lik2, $CellContext`svet]; Show[
           
           Graphics[{$CellContext`chessboard, $CellContext`sv1, \
$CellContext`sv2}], AspectRatio -> Automatic, BaseStyle -> {FontSize -> 12}, 
           ImageSize -> 250]], $CellContext`lik[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}, {
          Pattern[$CellContext`i, 
           Blank[]]}] := {{
          GrayLevel[
           If[$CellContext`bar == 0, 0.8, 1]], 
          Polygon[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
               
               Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                2)]}, {$CellContext`n, $CellContext`tip + 2}]]}, 
         If[$CellContext`bar == 2, {
           GrayLevel[0.8], 
           If[
            EvenQ[$CellContext`tip], 
            Polygon[
             Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                 Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                 
                 Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                  2)]}, {$CellContext`n, $CellContext`tip/2 + 2}]], 
            Polygon[
             
             Join[(1/2) {$CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[(2 Pi)/($CellContext`tip + 2)], 
                   Cos[(2 Pi)/($CellContext`tip + 2)]} + $CellContext`r + {
                 1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                   Sin[((2 Pi) 2)/($CellContext`tip + 2)], 
                   Cos[((2 Pi) 2)/($CellContext`tip + 2)]}}, 
              Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
                  Sin[((2 Pi) $CellContext`n)/($CellContext`tip + 2)], 
                  
                  Cos[((2 Pi) $CellContext`n)/($CellContext`tip + 
                   2)]}, {$CellContext`n, 2, ($CellContext`tip + 1)/2 + 
                2}]]]]}, {}], {
          GrayLevel[0], 
          Text[
           
           Part[$CellContext`individualconstants, $CellContext`i], \
$CellContext`r + {1/2, 1/2} - ((1/3) $CellContext`vel) {0, 0}], 
          BaseStyle -> {FontSize -> 20}}}, $CellContext`lik2[{
          Pattern[$CellContext`tip, 
           Blank[]], 
          Pattern[$CellContext`vel, 
           Blank[]], 
          Pattern[$CellContext`r, 
           Blank[]], 
          Pattern[$CellContext`bar, 
           Blank[]]}] := {{
          GrayLevel[0.], 
          $CellContext`ClosedLine[
           Table[$CellContext`r + {1/2, 1/2} + (1/5 + $CellContext`vel/4) {
               Sin[(2 Pi) ($CellContext`n/($CellContext`tip + 2))], 
               
               Cos[(2 Pi) ($CellContext`n/($CellContext`tip + 
                 2))]}, {$CellContext`n, $CellContext`tip + 
             2}]]}}, $CellContext`ClosedLine[
         Pattern[$CellContext`a, 
          Blank[]]] := Line[
         Append[$CellContext`a, 
          First[$CellContext`a]]], $CellContext`chessboard = {
         Line[{{0, 0}, {0, 5}}], 
         Line[{{0, 0}, {5, 0}}], 
         Line[{{0, 1}, {5, 1}}], 
         Line[{{0, 2}, {5, 2}}], 
         Line[{{0, 3}, {5, 3}}], 
         Line[{{0, 4}, {5, 4}}], 
         Line[{{0, 5}, {5, 5}}], 
         Line[{{1, 0}, {1, 5}}], 
         Line[{{2, 0}, {2, 5}}], 
         Line[{{3, 0}, {3, 5}}], 
         Line[{{4, 0}, {4, 5}}], 
         Line[{{5, 0}, {5, 5}}], {
          GrayLevel[1], 
          
          Line[{{-0.5, -0.5}, {5.5, -0.5}, {5.5, 5.5}, {-0.5, 
           5.5}, {-0.5, -0.5}}]}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->657699625]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell["\<\
The conditional probability of an event A assuming that B has occurred, \
denoted P(A|B), equals
P(A|B)=(P(A \[Intersection] B))/(P(B)). If P(B)=0, P(A|B) is undefined.\
\>", "DetailNotes",
 CellChangeTimes->{
  3.35696210375764*^9, {3.46069878015625*^9, 3.460698789140625*^9}, {
   3.46069977184375*^9, 3.46069981834375*^9}},
 CellID->110662465]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.4602960475147448`*^9},
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.460295992472241*^9, 
  3.4602960469306865`*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["total probability", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.459419785796875*^9, 3.45941980334375*^9}},
 CellID->614750335],

Cell["Bayes' theorem", "SearchTerms",
 CellChangeTimes->{
  3.35696210375764*^9, {3.459419810609375*^9, 3.459419824734375*^9}},
 CellID->118488803]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Conditional Probability",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/ConditionalProbability.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/ConditionalProbability.html"]], "RelatedLinks",\

 CellChangeTimes->{
  3.35696210375764*^9, {3.459419608515625*^9, 3.45941961009375*^9}},
 CellID->556517875],

Cell[TextData[ButtonBox["Total Probability Theorem",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/TotalProbabilityTheorem.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/TotalProbabilityTheorem.html"]], \
"RelatedLinks",
 CellChangeTimes->{
  3.35696210375764*^9, {3.459419656328125*^9, 3.459419685296875*^9}},
 CellID->531405562],

Cell[TextData[ButtonBox["Bayes' Theorem",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://mathworld.wolfram.com/BayesTheorem.html"], None},
 ButtonNote->
  "http://mathworld.wolfram.com/BayesTheorem.html"]], "RelatedLinks",
 CellChangeTimes->{
  3.35696210375764*^9, 3.459419709875*^9, {3.459419742984375*^9, 
   3.459419743*^9}},
 CellID->276498995]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell[TextData[{
 "Contributed by: ",
 ButtonBox["Izidor Hafner",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Izidor+Hafner"],
     None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Izidor+Hafner"]
}], "Author",
 CellChangeTimes->{
  3.35696210375764*^9, {3.459420654046875*^9, 3.459420660359375*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{812, 681},
WindowMargins->{{10, Automatic}, {Automatic, 0}},
FrontEndVersion->"7.0 for Microsoft Windows (32-bit) (February 18, 2009)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[360262, 9627, 376, 9, 22, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[360641, 9638, 678, 16, 22, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[361322, 9656, 430, 13, 22, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[361755, 9671, 637, 15, 22, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[362395, 9688, 844, 21, 22, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[363242, 9711, 369, 9, 22, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[363614, 9722, 1464, 31, 22, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[365081, 9755, 908, 21, 22, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 368394, 9862},
 {"RotateAndZoomIn3D", 368504, 9865},
 {"DragLocators", 368615, 9868},
 {"CreateAndDeleteLocators", 368732, 9871},
 {"SliderZoom", 368847, 9874},
 {"GamepadControls", 368954, 9877},
 {"AutomaticAnimation", 369068, 9880},
 {"BookmarkAnimation", 369186, 9883}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 244, 4, 74, "DemoTitle"],
Cell[CellGroupData[{
Cell[836, 30, 33, 0, 266, "InitializationSection"],
Cell[872, 32, 74467, 2019, 5122, "Input",
 InitializationCell->True,
 CellID->697381182]
}, Open  ]],
Cell[CellGroupData[{
Cell[75376, 2056, 29, 0, 230, "ManipulateSection"],
Cell[CellGroupData[{
Cell[75430, 2060, 10103, 231, 528, "Input"],
Cell[85536, 2293, 54412, 1449, 427, "Output",
 CellID->35865558]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[139997, 3748, 36, 0, 166, "ManipulateCaptionSection"],
Cell[140036, 3750, 677, 12, 52, "ManipulateCaption",
 CellID->771110710],
Cell[140716, 3764, 566, 11, 22, "ManipulateCaption",
 CellID->471109377],
Cell[141285, 3777, 680, 14, 68, "ManipulateCaption",
 CellID->837726494]
}, Open  ]],
Cell[CellGroupData[{
Cell[142002, 3796, 28, 0, 168, "ThumbnailSection"],
Cell[142033, 3798, 54413, 1449, 427, "Output",
 CellID->512230660]
}, Open  ]],
Cell[CellGroupData[{
Cell[196483, 5252, 28, 0, 138, "SnapshotsSection"],
Cell[196514, 5254, 54417, 1449, 427, "Output",
 CellID->833875686],
Cell[250934, 6705, 54413, 1449, 427, "Output",
 CellID->877125576],
Cell[305350, 8156, 54413, 1449, 427, "Output",
 CellID->657699625]
}, Open  ]],
Cell[CellGroupData[{
Cell[359800, 9610, 26, 0, 332, "DetailsSection"],
Cell[359829, 9612, 356, 8, 37, "DetailNotes",
 CellID->110662465]
}, Open  ]],
Cell[CellGroupData[{
Cell[360222, 9625, 37, 0, 120, "ControlSuggestionsSection"],
Cell[360262, 9627, 376, 9, 22, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[360641, 9638, 678, 16, 22, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[361322, 9656, 430, 13, 22, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[361755, 9671, 637, 15, 22, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[362395, 9688, 844, 21, 22, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[363242, 9711, 369, 9, 22, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[363614, 9722, 1464, 31, 22, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[365081, 9755, 908, 21, 22, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366026, 9781, 30, 0, 152, "SearchTermsSection"],
Cell[366059, 9783, 149, 3, 22, "SearchTerms",
 CellID->614750335],
Cell[366211, 9788, 147, 3, 22, "SearchTerms",
 CellID->118488803]
}, Open  ]],
Cell[CellGroupData[{
Cell[366395, 9796, 31, 0, 138, "RelatedLinksSection"],
Cell[366429, 9798, 370, 9, 22, "RelatedLinks",
 CellID->556517875],
Cell[366802, 9809, 375, 9, 22, "RelatedLinks",
 CellID->531405562],
Cell[367180, 9820, 357, 9, 22, "RelatedLinks",
 CellID->276498995]
}, Open  ]],
Cell[CellGroupData[{
Cell[367574, 9834, 25, 0, 136, "AuthorSection"],
Cell[367602, 9836, 389, 11, 22, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
